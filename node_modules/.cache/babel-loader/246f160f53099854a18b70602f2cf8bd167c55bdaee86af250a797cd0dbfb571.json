{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"http\", function () {\n    function failFirstLine(stream, state) {\n      stream.skipToEnd();\n      state.cur = header;\n      return \"error\";\n    }\n    function start(stream, state) {\n      if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n        state.cur = responseStatusCode;\n        return \"keyword\";\n      } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n        state.cur = requestPath;\n        return \"keyword\";\n      } else {\n        return failFirstLine(stream, state);\n      }\n    }\n    function responseStatusCode(stream, state) {\n      var code = stream.match(/^\\d+/);\n      if (!code) return failFirstLine(stream, state);\n      state.cur = responseStatusText;\n      var status = Number(code[0]);\n      if (status >= 100 && status < 200) {\n        return \"positive informational\";\n      } else if (status >= 200 && status < 300) {\n        return \"positive success\";\n      } else if (status >= 300 && status < 400) {\n        return \"positive redirect\";\n      } else if (status >= 400 && status < 500) {\n        return \"negative client-error\";\n      } else if (status >= 500 && status < 600) {\n        return \"negative server-error\";\n      } else {\n        return \"error\";\n      }\n    }\n    function responseStatusText(stream, state) {\n      stream.skipToEnd();\n      state.cur = header;\n      return null;\n    }\n    function requestPath(stream, state) {\n      stream.eatWhile(/\\S/);\n      state.cur = requestProtocol;\n      return \"string-2\";\n    }\n    function requestProtocol(stream, state) {\n      if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n        state.cur = header;\n        return \"keyword\";\n      } else {\n        return failFirstLine(stream, state);\n      }\n    }\n    function header(stream) {\n      if (stream.sol() && !stream.eat(/[ \\t]/)) {\n        if (stream.match(/^.*?:/)) {\n          return \"atom\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      } else {\n        stream.skipToEnd();\n        return \"string\";\n      }\n    }\n    function body(stream) {\n      stream.skipToEnd();\n      return null;\n    }\n    return {\n      token: function (stream, state) {\n        var cur = state.cur;\n        if (cur != header && cur != body && stream.eatSpace()) return null;\n        return cur(stream, state);\n      },\n      blankLine: function (state) {\n        state.cur = body;\n      },\n      startState: function () {\n        return {\n          cur: start\n        };\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"message/http\", \"http\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","token","eatSpace","blankLine","startState","defineMIME"],"sources":["D:/Java_Projects/MYBLOG-å¤‡ä»½/frontend/blog-frontend/node_modules/codemirror/mode/http/http.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"http\", function() {\n  function failFirstLine(stream, state) {\n    stream.skipToEnd();\n    state.cur = header;\n    return \"error\";\n  }\n\n  function start(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n      state.cur = responseStatusCode;\n      return \"keyword\";\n    } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n      state.cur = requestPath;\n      return \"keyword\";\n    } else {\n      return failFirstLine(stream, state);\n    }\n  }\n\n  function responseStatusCode(stream, state) {\n    var code = stream.match(/^\\d+/);\n    if (!code) return failFirstLine(stream, state);\n\n    state.cur = responseStatusText;\n    var status = Number(code[0]);\n    if (status >= 100 && status < 200) {\n      return \"positive informational\";\n    } else if (status >= 200 && status < 300) {\n      return \"positive success\";\n    } else if (status >= 300 && status < 400) {\n      return \"positive redirect\";\n    } else if (status >= 400 && status < 500) {\n      return \"negative client-error\";\n    } else if (status >= 500 && status < 600) {\n      return \"negative server-error\";\n    } else {\n      return \"error\";\n    }\n  }\n\n  function responseStatusText(stream, state) {\n    stream.skipToEnd();\n    state.cur = header;\n    return null;\n  }\n\n  function requestPath(stream, state) {\n    stream.eatWhile(/\\S/);\n    state.cur = requestProtocol;\n    return \"string-2\";\n  }\n\n  function requestProtocol(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n      state.cur = header;\n      return \"keyword\";\n    } else {\n      return failFirstLine(stream, state);\n    }\n  }\n\n  function header(stream) {\n    if (stream.sol() && !stream.eat(/[ \\t]/)) {\n      if (stream.match(/^.*?:/)) {\n        return \"atom\";\n      } else {\n        stream.skipToEnd();\n        return \"error\";\n      }\n    } else {\n      stream.skipToEnd();\n      return \"string\";\n    }\n  }\n\n  function body(stream) {\n    stream.skipToEnd();\n    return null;\n  }\n\n  return {\n    token: function(stream, state) {\n      var cur = state.cur;\n      if (cur != header && cur != body && stream.eatSpace()) return null;\n      return cur(stream, state);\n    },\n\n    blankLine: function(state) {\n      state.cur = body;\n    },\n\n    startState: function() {\n      return {cur: start};\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"message/http\", \"http\");\n\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}