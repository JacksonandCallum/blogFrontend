{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport mapData from \"./map\";\nexport default {\n  name: \"area-map\",\n  data() {\n    return {\n      chinaJson: [],\n      areaVisitData: [],\n      max: 200\n    };\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.getAreaVisitData();\n    });\n  },\n  methods: {\n    getAreaVisitData() {\n      this.$request.get(\"/user/selectAll\").then(res => {\n        if (res.code === \"200\") {\n          const data = res.data;\n          this.chinaJson = mapData;\n          let province = [];\n          this.chinaJson.features.forEach(item => {\n            data.forEach(user => {\n              const ipInfo = user.ip;\n              if (ipInfo) {\n                const addressMatch = ipInfo.match(/address=([^,]*)/);\n                if (addressMatch) {\n                  const addressParts = addressMatch[1].split('|');\n                  const provinceName = addressParts[2];\n                  if (item.properties.name.indexOf(provinceName) !== -1) {\n                    let curProvince = province.find(p => p.name === item.properties.name);\n                    if (curProvince) {\n                      curProvince.value++;\n                    } else {\n                      province.push({\n                        name: item.properties.name,\n                        value: 1\n                      });\n                    }\n                    this.max = Math.max(this.max, curProvince ? curProvince.value : 1);\n                  }\n                }\n              }\n            });\n          });\n          this.areaVisitData = province;\n          this.echartsInit();\n        } else {\n          console.error(\"Failed to fetch data: \", res.msg);\n        }\n      }).catch(err => {\n        console.error(\"Request failed: \", err);\n      });\n    },\n    async echartsInit() {\n      let data = this.areaVisitData;\n      console.log(data);\n      // let data = [\n      //   { name: \"北京市\", value: 39.93 },\n      //   { name: \"天津市\", value: 39.13 },\n      //   { name: \"河北省\", value: 147 },\n      //   { name: \"山西省\", value: 39 },\n      //   { name: \"内蒙古自治区\", value: 58 },\n      //   { name: \"辽宁省\", value: 50 },\n      //   { name: \"吉林省\", value: 51 },\n      //   { name: \"黑龙江省\", value: 114 },\n      //   { name: \"上海市\", value: 31.23 },\n      //   { name: \"江苏省\", value: 67 },\n      //   { name: \"浙江省\", value: 84 },\n      //   { name: \"安徽省\", value: 117 },\n      //   { name: \"福建省\", value: 29 },\n      //   { name: \"海南省\", value: 54 },\n      //   { name: \"重庆市\", value: 66 },\n      //   { name: \"四川省\", value: 500 },\n      //   { name: \"贵州省\", value: 71 },\n      //   { name: \"云南省\", value: 2500 },\n      //   { name: \"西藏自治区\", value: 24 },\n      //   { name: \"湖南省\", value: 61 },\n      //   { name: \"湖北省\", value: 99 },\n      //   { name: \"江西省\", value: 57 },\n      //   { name: \"宁夏回族自治区\", value: 52 },\n      //   { name: \"新疆维吾尔自治区\", value: 84 },\n      //   { name: \"台湾省\", value: 88 },\n      //   { name: \"香港特别行政区\", value: 66 },\n      // ];\n      const areaMapElement = document.getElementById(\"area-map\");\n      if (areaMapElement) {\n        const echart = this.$echarts.init(areaMapElement);\n        this.$echarts.registerMap(\"chinaMap\", this.chinaJson);\n        echart.setOption({\n          title: {\n            left: \"right\"\n          },\n          tooltip: {\n            trigger: \"item\",\n            formatter(params) {\n              return `${params.name}<br/>${params.value || 0} 访问次数`;\n            }\n          },\n          backgroundColor: \"#fff\",\n          visualMap: {\n            top: 0,\n            orient: \"horizontal\",\n            type: \"piecewise\",\n            formatter: function (value, value2) {\n              return value.toFixed(0) + \"-\" + value2.toFixed(0);\n            },\n            min: 0,\n            max: this.max,\n            textGap: 5,\n            itemGap: 30,\n            inRange: {\n              color: [\"#A3E80D\", \"#FAC858\", \"#B289EB\", \"#8089EF\", \"#EF3B34\"]\n            }\n          },\n          series: [{\n            type: \"map\",\n            map: \"chinaMap\",\n            zoom: 1.4,\n            center: [107.97, 37.71],\n            data: this.areaVisitData,\n            geoIndex: 0,\n            itemStyle: {\n              borderColor: \"#FFF\",\n              areaColor: \"#F5F5F5\",\n              borderWidth: 1.5\n            },\n            emphasis: {\n              label: {\n                color: \"#333\",\n                fontWeight: 500\n              },\n              itemStyle: {\n                borderColor: \"#FFF\",\n                areaColor: \"#9FD7DD\"\n              }\n            }\n          }]\n        });\n        window.addEventListener(\"resize\", () => {\n          echart.resize();\n        });\n      } else {\n        console.error(\"Cannot find the DOM element with id 'area-map'\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapData","name","data","chinaJson","areaVisitData","max","mounted","$nextTick","getAreaVisitData","methods","$request","get","then","res","code","province","features","forEach","item","user","ipInfo","ip","addressMatch","match","addressParts","split","provinceName","properties","indexOf","curProvince","find","p","value","push","Math","echartsInit","console","error","msg","catch","err","log","areaMapElement","document","getElementById","echart","$echarts","init","registerMap","setOption","title","left","tooltip","trigger","formatter","params","backgroundColor","visualMap","top","orient","type","value2","toFixed","min","textGap","itemGap","inRange","color","series","map","zoom","center","geoIndex","itemStyle","borderColor","areaColor","borderWidth","emphasis","label","fontWeight","window","addEventListener","resize"],"sources":["src/components/dataStatistics/area-map.vue"],"sourcesContent":["<template>\n  <div style=\"width: 100%; height: 100%;\">\n    <div id=\"area-map\"></div>\n  </div>\n</template>\n\n<script>\nimport mapData from \"./map\";\nexport default {\n  name: \"area-map\",\n  data() {\n    return {\n      chinaJson: [],\n      areaVisitData: [],\n      max: 200,\n    };\n  },\n\n  mounted() {\n    this.$nextTick(() => {\n      this.getAreaVisitData();\n    });\n  },\n\n  methods: {\n    getAreaVisitData() {\n      this.$request.get(\"/user/selectAll\").then(res => {\n        if (res.code === \"200\") {\n          const data = res.data;\n          this.chinaJson = mapData;\n          let province = [];\n          this.chinaJson.features.forEach((item) => {\n            data.forEach((user) => {\n              const ipInfo = user.ip;\n              if (ipInfo) {\n                const addressMatch = ipInfo.match(/address=([^,]*)/);\n                if (addressMatch) {\n                  const addressParts = addressMatch[1].split('|');\n                  const provinceName = addressParts[2];\n                  if (item.properties.name.indexOf(provinceName) !== -1) {\n                    let curProvince = province.find(p => p.name === item.properties.name);\n                    if (curProvince) {\n                      curProvince.value++;\n                    } else {\n                      province.push({\n                        name: item.properties.name,\n                        value: 1,\n                      });\n                    }\n                    this.max = Math.max(this.max, curProvince ? curProvince.value : 1);\n                  }\n                }\n              }\n            });\n          });\n          this.areaVisitData = province;\n          this.echartsInit();\n        } else {\n          console.error(\"Failed to fetch data: \", res.msg);\n        }\n      }).catch(err => {\n        console.error(\"Request failed: \", err);\n      });\n    },\n\n    async echartsInit() {\n      let data = this.areaVisitData;\n      console.log(data);\n      // let data = [\n      //   { name: \"北京市\", value: 39.93 },\n      //   { name: \"天津市\", value: 39.13 },\n      //   { name: \"河北省\", value: 147 },\n      //   { name: \"山西省\", value: 39 },\n      //   { name: \"内蒙古自治区\", value: 58 },\n      //   { name: \"辽宁省\", value: 50 },\n      //   { name: \"吉林省\", value: 51 },\n      //   { name: \"黑龙江省\", value: 114 },\n      //   { name: \"上海市\", value: 31.23 },\n      //   { name: \"江苏省\", value: 67 },\n      //   { name: \"浙江省\", value: 84 },\n      //   { name: \"安徽省\", value: 117 },\n      //   { name: \"福建省\", value: 29 },\n      //   { name: \"海南省\", value: 54 },\n      //   { name: \"重庆市\", value: 66 },\n      //   { name: \"四川省\", value: 500 },\n      //   { name: \"贵州省\", value: 71 },\n      //   { name: \"云南省\", value: 2500 },\n      //   { name: \"西藏自治区\", value: 24 },\n      //   { name: \"湖南省\", value: 61 },\n      //   { name: \"湖北省\", value: 99 },\n      //   { name: \"江西省\", value: 57 },\n      //   { name: \"宁夏回族自治区\", value: 52 },\n      //   { name: \"新疆维吾尔自治区\", value: 84 },\n      //   { name: \"台湾省\", value: 88 },\n      //   { name: \"香港特别行政区\", value: 66 },\n      // ];\n      const areaMapElement = document.getElementById(\"area-map\");\n\n      if (areaMapElement) {\n        const echart = this.$echarts.init(areaMapElement);\n        this.$echarts.registerMap(\"chinaMap\", this.chinaJson);\n\n        echart.setOption({\n          title: {\n            left: \"right\",\n          },\n          tooltip: {\n            trigger: \"item\",\n            formatter(params) {\n              return `${params.name}<br/>${params.value || 0} 访问次数`;\n            },\n          },\n          backgroundColor: \"#fff\",\n          visualMap: {\n            top: 0,\n            orient: \"horizontal\",\n            type: \"piecewise\",\n            formatter: function (value, value2) {\n              return value.toFixed(0) + \"-\" + value2.toFixed(0);\n            },\n            min: 0,\n            max: this.max,\n            textGap: 5,\n            itemGap: 30,\n            inRange: {\n              color: [\"#A3E80D\", \"#FAC858\", \"#B289EB\", \"#8089EF\", \"#EF3B34\"],\n            },\n          },\n          series: [\n            {\n              type: \"map\",\n              map: \"chinaMap\",\n              zoom: 1.4,\n              center: [107.97, 37.71],\n              data: this.areaVisitData,\n              geoIndex: 0,\n              itemStyle: {\n                borderColor: \"#FFF\",\n                areaColor: \"#F5F5F5\",\n                borderWidth: 1.5,\n              },\n              emphasis: {\n                label: {\n                  color: \"#333\",\n                  fontWeight: 500,\n                },\n                itemStyle: {\n                  borderColor: \"#FFF\",\n                  areaColor: \"#9FD7DD\",\n                },\n              },\n            },\n          ],\n        });\n        window.addEventListener(\"resize\", () => {\n          echart.resize();\n        });\n      } else {\n        console.error(\"Cannot find the DOM element with id 'area-map'\");\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n#area-map {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}