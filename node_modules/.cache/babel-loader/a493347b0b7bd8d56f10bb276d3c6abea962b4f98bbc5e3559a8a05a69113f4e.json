{"ast":null,"code":"const actions = [\"bold\", \"underline\", \"strikeThrough\", \"justifyLeft\", \"justifyCenter\", \"justifyRight\"];\nimport urils from \"../../utils/utils\";\nexport default {\n  name: \"dialogue\",\n  components: {},\n  props: {\n    themeType: {\n      default: 1\n    },\n    content: {\n      default() {\n        return {};\n      }\n    },\n    token: {\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      commandState: [],\n      scoped: \"token\" + urils.createUid()\n    };\n  },\n  mounted() {},\n  watch: {\n    token: {\n      immediate: true,\n      handler() {\n        this.$nextTick(() => {\n          this.$refs[\"layEditor-container\"].innerHTML = this.content.template;\n        });\n      }\n    }\n  },\n  methods: {\n    onHandler() {\n      this.onCommandState();\n      let template = this.$refs[\"layEditor-container\"].innerHTML;\n      let leftText = document.querySelector(`#${this.scoped} .layEditor-richText-left`);\n      let rightText = document.querySelector(`#${this.scoped} .layEditor-richText-right`);\n      this.$emit(\"change\", {\n        template: template,\n        leftImg: this.content.leftImg,\n        rightImg: this.content.rightImg,\n        leftText: leftText.innerHTML,\n        rightText: rightText.innerHTML\n      });\n    },\n    // 监听剪贴板 粘贴去除格式\n    optimizePasteEvent(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      let text = \"\";\n      const event = e.originalEvent || e;\n      // 获取 剪贴板 格式化后的内容\n      if (event.clipboardData && event.clipboardData.getData) {\n        text = event.clipboardData.getData(\"text/plain\");\n      } else if (window.clipboardData && window.clipboardData.getData) {\n        text = window.clipboardData.getData(\"Text\");\n      }\n      // 插入内容\n      if (document.queryCommandSupported(\"insertText\")) {\n        document.execCommand(\"insertHTML\", true, text);\n        return;\n      } else if (document.execCommand) {\n        document.execCommand(\"paste\", false, text);\n        return;\n      }\n    },\n    onCommandState() {\n      this.commandState = actions.filter(item => document.queryCommandState(item));\n      this.$emit(\"commandState\", this.commandState);\n    }\n  }\n};","map":{"version":3,"names":["actions","urils","name","components","props","themeType","default","content","token","data","commandState","scoped","createUid","mounted","watch","immediate","handler","$nextTick","$refs","innerHTML","template","methods","onHandler","onCommandState","leftText","document","querySelector","rightText","$emit","leftImg","rightImg","optimizePasteEvent","e","stopPropagation","preventDefault","text","event","originalEvent","clipboardData","getData","window","queryCommandSupported","execCommand","filter","item","queryCommandState"],"sources":["node_modules/vue2-lay-editor/temp/dialogue/dialogue.vue"],"sourcesContent":["<template>\n  <div :id=\"scoped\" class=\"layEditor-dialogue\">\n    <div class=\"title-section\">\n      <div\n        @keyup=\"onHandler\"\n        @input=\"onHandler\"\n        @mouseup=\"onHandler\"\n        @click=\"onHandler\"\n        id=\"layEditor-container\"\n        ref=\"layEditor-container\"\n      ></div>\n    </div>\n  </div>\n</template>\n<script>\nconst actions = [\n  \"bold\",\n  \"underline\",\n  \"strikeThrough\",\n  \"justifyLeft\",\n  \"justifyCenter\",\n  \"justifyRight\",\n];\nimport urils from \"../../utils/utils\";\n\nexport default {\n  name: \"dialogue\",\n  components: {},\n  props: {\n    themeType: {\n      default: 1,\n    },\n    content: {\n      default() {\n        return {};\n      },\n    },\n    token: {\n      default: \"\",\n    },\n  },\n  data() {\n    return {\n      commandState: [],\n      scoped: \"token\" + urils.createUid(),\n    };\n  },\n\n  mounted() {},\n  watch: {\n    token: {\n      immediate: true,\n      handler() {\n        this.$nextTick(() => {\n          this.$refs[\"layEditor-container\"].innerHTML = this.content.template;\n        });\n      },\n    },\n  },\n  methods: {\n    onHandler() {\n      this.onCommandState();\n      let template = this.$refs[\"layEditor-container\"].innerHTML;\n      let leftText = document.querySelector(\n        `#${this.scoped} .layEditor-richText-left`\n      );\n      let rightText = document.querySelector(\n        `#${this.scoped} .layEditor-richText-right`\n      );\n\n      this.$emit(\"change\", {\n        template: template,\n        leftImg: this.content.leftImg,\n        rightImg: this.content.rightImg,\n        leftText: leftText.innerHTML,\n        rightText: rightText.innerHTML,\n      });\n    },\n    // 监听剪贴板 粘贴去除格式\n    optimizePasteEvent(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      let text = \"\";\n      const event = e.originalEvent || e;\n      // 获取 剪贴板 格式化后的内容\n      if (event.clipboardData && event.clipboardData.getData) {\n        text = event.clipboardData.getData(\"text/plain\");\n      } else if (window.clipboardData && window.clipboardData.getData) {\n        text = window.clipboardData.getData(\"Text\");\n      }\n      // 插入内容\n      if (document.queryCommandSupported(\"insertText\")) {\n        document.execCommand(\"insertHTML\", true, text);\n        return;\n      } else if (document.execCommand) {\n        document.execCommand(\"paste\", false, text);\n        return;\n      }\n    },\n    onCommandState() {\n      this.commandState = actions.filter((item) =>\n        document.queryCommandState(item)\n      );\n      this.$emit(\"commandState\", this.commandState);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.layEditor-dialogue {\n}\n.layEditor-dialogue #layEditor-richText {\n  outline: none;\n  overflow: auto;\n  word-break: break-all;\n  font-family: system, -apple-system, BlinkMacSystemFont, PingFang SC, Segoe UI,\n    Microsoft YaHei, wenquanyi micro hei, Hiragino Sans GB, Hiragino Sans GB W3,\n    Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue,\n    Helvetica, Arial, sans-serif;\n  line-height: 1.75;\n  font-size: 16px;\n  word-break: break-word;\n  -moz-user-modify: read-write;\n  -webkit-user-modify: read-write;\n}\n\n.layEditor-dialogue #layEditor-richText {\n  ul,\n  ol {\n    padding-left: 20px;\n  }\n}\n\n.layEditor-dialogue #layEditor-richText li {\n  list-style-type: \"🔸\";\n  padding-left: 5px;\n}\n#layEditor-richText ol li {\n  list-style-type: decimal;\n}\n\n.layEditor-dialogue #layEditor-richText:empty::before {\n  content: attr(placeholder);\n  color: #c0c4cf;\n}\n</style>\n"],"mappings":"AAeA,MAAAA,OAAA,IACA,QACA,aACA,iBACA,eACA,iBACA,eACA;AACA,OAAAC,KAAA;AAEA;EACAC,IAAA;EACAC,UAAA;EACAC,KAAA;IACAC,SAAA;MACAC,OAAA;IACA;IACAC,OAAA;MACAD,QAAA;QACA;MACA;IACA;IACAE,KAAA;MACAF,OAAA;IACA;EACA;EACAG,KAAA;IACA;MACAC,YAAA;MACAC,MAAA,YAAAV,KAAA,CAAAW,SAAA;IACA;EACA;EAEAC,QAAA;EACAC,KAAA;IACAN,KAAA;MACAO,SAAA;MACAC,QAAA;QACA,KAAAC,SAAA;UACA,KAAAC,KAAA,wBAAAC,SAAA,QAAAZ,OAAA,CAAAa,QAAA;QACA;MACA;IACA;EACA;EACAC,OAAA;IACAC,UAAA;MACA,KAAAC,cAAA;MACA,IAAAH,QAAA,QAAAF,KAAA,wBAAAC,SAAA;MACA,IAAAK,QAAA,GAAAC,QAAA,CAAAC,aAAA,CACA,SAAAf,MAAA,2BACA;MACA,IAAAgB,SAAA,GAAAF,QAAA,CAAAC,aAAA,CACA,SAAAf,MAAA,4BACA;MAEA,KAAAiB,KAAA;QACAR,QAAA,EAAAA,QAAA;QACAS,OAAA,OAAAtB,OAAA,CAAAsB,OAAA;QACAC,QAAA,OAAAvB,OAAA,CAAAuB,QAAA;QACAN,QAAA,EAAAA,QAAA,CAAAL,SAAA;QACAQ,SAAA,EAAAA,SAAA,CAAAR;MACA;IACA;IACA;IACAY,mBAAAC,CAAA;MACAA,CAAA,CAAAC,eAAA;MACAD,CAAA,CAAAE,cAAA;MACA,IAAAC,IAAA;MACA,MAAAC,KAAA,GAAAJ,CAAA,CAAAK,aAAA,IAAAL,CAAA;MACA;MACA,IAAAI,KAAA,CAAAE,aAAA,IAAAF,KAAA,CAAAE,aAAA,CAAAC,OAAA;QACAJ,IAAA,GAAAC,KAAA,CAAAE,aAAA,CAAAC,OAAA;MACA,WAAAC,MAAA,CAAAF,aAAA,IAAAE,MAAA,CAAAF,aAAA,CAAAC,OAAA;QACAJ,IAAA,GAAAK,MAAA,CAAAF,aAAA,CAAAC,OAAA;MACA;MACA;MACA,IAAAd,QAAA,CAAAgB,qBAAA;QACAhB,QAAA,CAAAiB,WAAA,qBAAAP,IAAA;QACA;MACA,WAAAV,QAAA,CAAAiB,WAAA;QACAjB,QAAA,CAAAiB,WAAA,iBAAAP,IAAA;QACA;MACA;IACA;IACAZ,eAAA;MACA,KAAAb,YAAA,GAAAV,OAAA,CAAA2C,MAAA,CAAAC,IAAA,IACAnB,QAAA,CAAAoB,iBAAA,CAAAD,IAAA,CACA;MACA,KAAAhB,KAAA,sBAAAlB,YAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}