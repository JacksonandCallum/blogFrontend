{"ast":null,"code":"export default {\n  props: {\n    isHitokoto: {\n      type: Boolean,\n      default: true\n    },\n    isShehui: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      guShi: {\n        content: \"...\",\n        origin: \"...\",\n        author: \"...\",\n        category: \"...\"\n      },\n      hitokoto: {\n        hitokoto: \"...\",\n        from: \"...\",\n        from_who: \"...\"\n      }\n    };\n  },\n  async mounted() {\n    if (this.isShehui) {\n      this.hitokoto.from = \"\";\n      this.hitokoto.from_who = \"\";\n      await this.sendShehui();\n    } else {\n      this.isHitokoto ? await this.getHitokoto() : await this.getGuShi();\n    }\n  },\n  methods: {\n    async sendShehui() {\n      try {\n        const response = await fetch(this.$constant.shehui);\n        const shehui = await response.text();\n        this.hitokoto.hitokoto = shehui.substring(1, shehui.length - 1);\n      } catch (error) {\n        console.error('获取社会数据失败:', error);\n      }\n    },\n    async getGuShi() {\n      try {\n        const response = await fetch(this.$constant.jinrishici);\n        this.guShi = await response.json();\n      } catch (error) {\n        console.error('获取古诗数据失败:', error);\n      }\n    },\n    async getHitokoto() {\n      try {\n        const response = await fetch(this.$constant.hitokoto);\n        this.hitokoto = await response.json();\n      } catch (error) {\n        console.error('获取一言数据失败:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","isHitokoto","type","Boolean","default","isShehui","data","guShi","content","origin","author","category","hitokoto","from","from_who","mounted","sendShehui","getHitokoto","getGuShi","methods","response","fetch","$constant","shehui","text","substring","length","error","console","jinrishici","json"],"sources":["src/components/twoPoem.vue"],"sourcesContent":["<template>\r\n  <div class=\"poem-container myCenter my-animation-hideToShow\"\r\n    v-if=\"!$common.isEmpty(guShi.origin) || !$common.isEmpty(hitokoto.hitokoto)\">\r\n    <!-- 背景图片 -->\r\n    <el-image class=\"my-el-image poem-image\" style=\"position: absolute; margin-top: -50px\" v-once lazy\r\n      :src=\"$constant.random_image + new Date() + Math.floor(Math.random() * 10)\" fit=\"cover\">\r\n      <div slot=\"error\" class=\"image-slot\"></div>\r\n    </el-image>\r\n    <div class=\"poem-wrap\">\r\n      <div v-if=\"isShehui\"><span>鬼畜全明星</span></div>\r\n      <div v-else><span>{{ isHitokoto ? hitokoto.from : guShi.origin }}</span></div>\r\n      <p class=\"poem\">{{ isHitokoto ? hitokoto.hitokoto : guShi.content }}</p>\r\n      <p class=\"info\" v-if=\"!isShehui && (!isHitokoto || (isHitokoto && !$common.isEmpty(hitokoto.from_who)))\">\r\n        {{ isHitokoto ? hitokoto.from_who : guShi.author }}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    isHitokoto: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    isShehui: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      guShi: {\r\n        content: \"...\",\r\n        origin: \"...\",\r\n        author: \"...\",\r\n        category: \"...\"\r\n      },\r\n      hitokoto: {\r\n        hitokoto: \"...\",\r\n        from: \"...\",\r\n        from_who: \"...\"\r\n      }\r\n    };\r\n  },\r\n  async mounted() {\r\n    if (this.isShehui) {\r\n      this.hitokoto.from = \"\";\r\n      this.hitokoto.from_who = \"\";\r\n      await this.sendShehui();\r\n    } else {\r\n      this.isHitokoto ? await this.getHitokoto() : await this.getGuShi();\r\n    }\r\n  },\r\n  methods: {\r\n    async sendShehui() {\r\n      try {\r\n        const response = await fetch(this.$constant.shehui);\r\n        const shehui = await response.text();\r\n        this.hitokoto.hitokoto = shehui.substring(1, shehui.length - 1);\r\n      } catch (error) {\r\n        console.error('获取社会数据失败:', error);\r\n      }\r\n    },\r\n    async getGuShi() {\r\n      try {\r\n        const response = await fetch(this.$constant.jinrishici);\r\n        this.guShi = await response.json();\r\n      } catch (error) {\r\n        console.error('获取古诗数据失败:', error);\r\n      }\r\n    },\r\n    async getHitokoto() {\r\n      try {\r\n        const response = await fetch(this.$constant.hitokoto);\r\n        this.hitokoto = await response.json();\r\n      } catch (error) {\r\n        console.error('获取一言数据失败:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.poem-container {\r\n  padding: 90px 0 40px;\r\n  position: relative;\r\n}\r\n\r\n/* 以my-animation-开头的class */\r\n[class*=my-animation-] {\r\n  animation-duration: 1s;\r\n  animation-timing-function: ease-out;\r\n  animation-fill-mode: both;\r\n}\r\n\r\n.my-animation-hideToShow {\r\n  animation-name: hideToShow;\r\n}\r\n\r\n/* 遮罩 */\r\n.poem-image::before {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  content: \"\";\r\n}\r\n\r\n.poem-wrap {\r\n  border-radius: 10px;\r\n  z-index: 10;\r\n  text-align: center;\r\n  letter-spacing: 4px;\r\n  font-weight: 300;\r\n  width: 100%;\r\n  max-width: 800px;\r\n}\r\n\r\n.poem-wrap div span {\r\n  padding: 5px 10px;\r\n  color: white;\r\n  font-size: 2em;\r\n  border-radius: 5px;\r\n}\r\n\r\n.poem-wrap p {\r\n  width: 100%;\r\n  max-width: 800px;\r\n  color: white;\r\n}\r\n\r\n.poem-wrap p.poem {\r\n  margin: 40px auto;\r\n  font-size: 1.5em;\r\n}\r\n\r\n.poem-wrap p.info {\r\n  margin: 20px auto 40px;\r\n  font-size: 1.1em;\r\n}\r\n</style>\r\n"],"mappings":"AAoBA;EACAA,KAAA;IACAC,UAAA;MACAC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;IACAC,QAAA;MACAH,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;EACA;EACAE,KAAA;IACA;MACAC,KAAA;QACAC,OAAA;QACAC,MAAA;QACAC,MAAA;QACAC,QAAA;MACA;MACAC,QAAA;QACAA,QAAA;QACAC,IAAA;QACAC,QAAA;MACA;IACA;EACA;EACA,MAAAC,QAAA;IACA,SAAAV,QAAA;MACA,KAAAO,QAAA,CAAAC,IAAA;MACA,KAAAD,QAAA,CAAAE,QAAA;MACA,WAAAE,UAAA;IACA;MACA,KAAAf,UAAA,cAAAgB,WAAA,gBAAAC,QAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAH,WAAA;MACA;QACA,MAAAI,QAAA,SAAAC,KAAA,MAAAC,SAAA,CAAAC,MAAA;QACA,MAAAA,MAAA,SAAAH,QAAA,CAAAI,IAAA;QACA,KAAAZ,QAAA,CAAAA,QAAA,GAAAW,MAAA,CAAAE,SAAA,IAAAF,MAAA,CAAAG,MAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;MACA;IACA;IACA,MAAAT,SAAA;MACA;QACA,MAAAE,QAAA,SAAAC,KAAA,MAAAC,SAAA,CAAAO,UAAA;QACA,KAAAtB,KAAA,SAAAa,QAAA,CAAAU,IAAA;MACA,SAAAH,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;MACA;IACA;IACA,MAAAV,YAAA;MACA;QACA,MAAAG,QAAA,SAAAC,KAAA,MAAAC,SAAA,CAAAV,QAAA;QACA,KAAAA,QAAA,SAAAQ,QAAA,CAAAU,IAAA;MACA,SAAAH,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}