{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"ranking\",\n  data() {\n    return {\n      // areaVisitData: [],\n      province: [],\n      values: [],\n      max: 0,\n      // 存储 ECharts 实例\n      echart: null\n    };\n  },\n  mounted() {\n    // 确保在 DOM 渲染完成之后再初始化 ECharts\n    this.$nextTick(() => {\n      this.echartsInit();\n      this.getAreaVisitData();\n    });\n  },\n  methods: {\n    // 获取省份访问数据\n    async getAreaVisitData() {\n      try {\n        const res = await this.$request.get(\"/user/selectAll\");\n        if (res.code === \"200\" && res.data) {\n          res.data.forEach(user => {\n            const ipInfo = user.ip;\n            if (ipInfo) {\n              // 检查 ipInfo 是否存在\n              const address = ipInfo.match(/address=([^,]*)/);\n              if (address) {\n                const provinceName = address[1].split(\"|\")[2];\n                let curProvince = this.province.find(p => p.name === provinceName);\n                if (curProvince) {\n                  curProvince.value++;\n                } else {\n                  this.province.push({\n                    name: provinceName,\n                    value: 1\n                  });\n                }\n                if (1 > this.max) this.max = 1 + 100;\n              }\n            }\n          });\n          let empty = 10 - this.province.length;\n          if (empty > 0) {\n            new Array(empty).fill(\"-\").forEach(() => {\n              this.province.push(\"-\");\n              this.values.push(0);\n            });\n          }\n\n          // 设置 values 和最大值\n          this.values = this.province.map(p => p.value);\n          this.max += this.getDigit(`${this.max}`.length);\n\n          // 更新 ECharts 配置\n          this.updateEcharts();\n        }\n      } catch (err) {\n        console.error(\"Request failed: \", err);\n      }\n    },\n    // 初始化 ECharts 实例的方法\n    echartsInit() {\n      const element = document.getElementById(\"ranking\");\n      if (element) {\n        this.echart = this.$echarts.init(element);\n        window.addEventListener(\"resize\", () => {\n          this.echart.resize();\n        });\n      } else {\n        console.error(\"Cannot find the DOM element with id 'ranking'\");\n      }\n    },\n    // 更新 ECharts 配置的方法\n    updateEcharts() {\n      const option = {\n        tooltip: {\n          trigger: \"axis\"\n        },\n        grid: {\n          // 设置柱状图整体偏移量\n          // top: 0,\n          left: \"20%\",\n          right: 30,\n          bottom: 8\n        },\n        xAxis: {\n          show: false,\n          type: \"value\",\n          max: this.max,\n          //去除网格线\n          splitLine: {\n            show: false\n          },\n          // 坐标轴线\n          axisLine: {\n            show: false // 是否显示\n          }\n        },\n        yAxis: {\n          inverse: true,\n          type: \"category\",\n          data: this.province.map(p => p.name),\n          splitLine: {\n            show: false\n          },\n          axisLine: {\n            show: false // 是否显示\n          },\n          splitArea: {\n            show: false // 是否显示\n          },\n          // 分割标点\n          axisTick: {\n            show: false\n          }\n        },\n        series: [{\n          type: \"bar\",\n          data: this.values,\n          barMaxWidth: 20,\n          barGap: \"20%\" /*多个并排柱子设置柱子之间的间距*/,\n\n          // 默认背景\n          showBackground: \"#F5F5F5\",\n          backgroundStyle: {\n            borderRadius: 5\n          },\n          itemStyle: {\n            // 给每个柱子设置颜色\n            normal: {\n              color: \"#8089EF\",\n              barBorderRadius: 5,\n              label: {\n                show: true,\n                // 开启显示\n                position: \"right\",\n                // 标签的位置。\n                color: \"#999\",\n                formatter(params) {\n                  return params.value ? `${params.value}` : \"\";\n                }\n              }\n            }\n          }\n        }]\n      };\n      if (this.echart) {\n        this.echart.setOption(option);\n      } else {\n        console.error(\"ECharts instance is not initialized.\");\n      }\n    },\n    // 获取位数\n    getDigit(n = 1) {\n      let l = n == 1 ? \"1\" : n - 1;\n      let zero = \"1\";\n      new Array(l).fill(\"\").forEach(i => {\n        zero = `${zero}0`;\n      });\n      return zero * 1;\n    }\n  }\n};","map":{"version":3,"names":["name","data","province","values","max","echart","mounted","$nextTick","echartsInit","getAreaVisitData","methods","res","$request","get","code","forEach","user","ipInfo","ip","address","match","provinceName","split","curProvince","find","p","value","push","empty","length","Array","fill","map","getDigit","updateEcharts","err","console","error","element","document","getElementById","$echarts","init","window","addEventListener","resize","option","tooltip","trigger","grid","left","right","bottom","xAxis","show","type","splitLine","axisLine","yAxis","inverse","splitArea","axisTick","series","barMaxWidth","barGap","showBackground","backgroundStyle","borderRadius","itemStyle","normal","color","barBorderRadius","label","position","formatter","params","setOption","n","l","zero","i"],"sources":["src/components/dataStatistics/ranking-bar.vue"],"sourcesContent":["<template>\n  <div style=\"width: 100%; height: 450px;\">\n    <div id=\"ranking\"></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"ranking\",\n\n  data() {\n    return {\n      // areaVisitData: [],\n      province: [],\n      values: [],\n      max: 0,\n      // 存储 ECharts 实例\n      echart: null,\n    };\n  },\n\n  mounted() {\n    // 确保在 DOM 渲染完成之后再初始化 ECharts\n    this.$nextTick(() => {\n      this.echartsInit();\n      this.getAreaVisitData();\n    });\n  },\n\n  methods: {\n    // 获取省份访问数据\n    async getAreaVisitData() {\n      try {\n        const res = await this.$request.get(\"/user/selectAll\");\n        if (res.code === \"200\" && res.data) {\n          res.data.forEach((user) => {\n            const ipInfo = user.ip;\n            if (ipInfo) { // 检查 ipInfo 是否存在\n              const address = ipInfo.match(/address=([^,]*)/);\n              if (address) {\n                const provinceName = address[1].split(\"|\")[2];\n                let curProvince = this.province.find(\n                  (p) => p.name === provinceName\n                );\n                if (curProvince) {\n                  curProvince.value++;\n                } else {\n                  this.province.push({\n                    name: provinceName,\n                    value: 1,\n                  });\n                }\n                if (1 > this.max) this.max = 1 + 100;\n              }\n            }\n          });\n\n          let empty = 10 - this.province.length;\n          if (empty > 0) {\n            new Array(empty).fill(\"-\").forEach(() => {\n              this.province.push(\"-\");\n              this.values.push(0);\n            });\n          }\n\n          // 设置 values 和最大值\n          this.values = this.province.map((p) => p.value);\n          this.max += this.getDigit(`${this.max}`.length);\n\n          // 更新 ECharts 配置\n          this.updateEcharts();\n        }\n      } catch (err) {\n        console.error(\"Request failed: \", err);\n      }\n    },\n\n    // 初始化 ECharts 实例的方法\n    echartsInit() {\n      const element = document.getElementById(\"ranking\");\n      if (element) {\n        this.echart = this.$echarts.init(element);\n        window.addEventListener(\"resize\", () => {\n          this.echart.resize();\n        });\n      } else {\n        console.error(\"Cannot find the DOM element with id 'ranking'\");\n      }\n    },\n\n    // 更新 ECharts 配置的方法\n    updateEcharts() {\n      const option = {\n        tooltip: {\n          trigger: \"axis\",\n        },\n        grid: {\n          // 设置柱状图整体偏移量\n          // top: 0,\n          left: \"20%\",\n          right: 30,\n          bottom: 8,\n        },\n        xAxis: {\n          show: false,\n          type: \"value\",\n          max: this.max,\n          //去除网格线\n          splitLine: { show: false },\n          // 坐标轴线\n          axisLine: {\n            show: false, // 是否显示\n          },\n        },\n        yAxis: {\n          inverse: true,\n          type: \"category\",\n          data: this.province.map((p) => p.name),\n          splitLine: { show: false },\n          axisLine: {\n            show: false, // 是否显示\n          },\n          splitArea: {\n            show: false, // 是否显示\n          },\n          // 分割标点\n          axisTick: {\n            show: false,\n          },\n        },\n        series: [\n          {\n            type: \"bar\",\n            data: this.values,\n            barMaxWidth: 20,\n            barGap: \"20%\" /*多个并排柱子设置柱子之间的间距*/,\n            // 默认背景\n            showBackground: \"#F5F5F5\",\n            backgroundStyle: {\n              borderRadius: 5,\n            },\n            itemStyle: {\n              // 给每个柱子设置颜色\n              normal: {\n                color: \"#8089EF\",\n                barBorderRadius: 5,\n                label: {\n                  show: true, // 开启显示\n                  position: \"right\", // 标签的位置。\n                  color: \"#999\",\n                  formatter(params) {\n                    return params.value ? `${params.value}` : \"\";\n                  },\n                },\n              },\n            },\n          },\n        ],\n      };\n      if (this.echart) {\n        this.echart.setOption(option);\n      } else {\n        console.error(\"ECharts instance is not initialized.\");\n      }\n    },\n\n    // 获取位数\n    getDigit(n = 1) {\n      let l = n == 1 ? \"1\" : n - 1;\n      let zero = \"1\";\n      new Array(l).fill(\"\").forEach((i) => {\n        zero = `${zero}0`;\n      });\n      return zero * 1;\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n#ranking {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}