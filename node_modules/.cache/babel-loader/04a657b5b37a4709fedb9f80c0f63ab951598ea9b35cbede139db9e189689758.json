{"ast":null,"code":"import proButton from '@/components/proButton.vue';\nexport default {\n  name: \"newBlog\",\n  components: {\n    proButton\n  },\n  data() {\n    return {\n      form: {},\n      user: JSON.parse(localStorage.getItem('ADMIN') || '{}'),\n      rules: {},\n      blogId: this.$route.query.blogId,\n      ids: [],\n      categoryList: [],\n      tagsArr: [],\n      content: [],\n      options: {\n        uploadImg(file, src) {\n          // 创建一个新的 FormData 对象\n          let fileData = new FormData();\n\n          // 将文件添加到 fileData 中，名字为 'file'\n          fileData.append(\"file\", file);\n          return this.$request.post(\"/files/emotion/upload\", fileData).then(res => {\n            // 上传成功，返回上传后的图片地址\n            return src = res.data.url;\n          }).catch(error => {\n            // 上传失败，可以根据需要处理错误\n            console.error('上传失败:', error);\n            throw error;\n          });\n        },\n        dialogue: [{\n          // 左边人物图片\n          leftImg: \"https://lay-editor.gitee.io/lay-editor-doc/dialogue/hamster-1.png\",\n          // 右边人物图片\n          rightImg: \"https://lay-editor.gitee.io/lay-editor-doc/dialogue/hamster-2.png\"\n        }],\n        maxEmoticon: [{}, {}],\n        // 配置 小图表情包\n        minEmoticon: [{}]\n      },\n      src: require(\"@/assets/imgs/boyWithCat.jpg\")\n    };\n  },\n  created() {\n    this.load(1);\n  },\n  mounted() {},\n  methods: {\n    // 编辑器内容发生变化触发\n    onLayEditor(data) {\n      // console.log(\"编辑器\", data)\n    },\n    save() {\n      // 保存按钮触发的逻辑  它会触发新增或者更新\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.form.tags = JSON.stringify(this.tagsArr); // 将JSON数组转换成JSON字符串存储到数据库\n          this.form.content = JSON.stringify(this.content); // 将编辑器内容数组转换为字符串并保存到 form.content\n          this.$request({\n            url: this.form.id ? '/blog/update' : '/blog/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // 表示成功保存\n              this.$message.success('保存成功');\n            } else {\n              this.$message.error(res.msg); // 弹出错误的信息\n            }\n          });\n        }\n      });\n    },\n    load() {\n      this.$request.get(\"/category/selectAll\").then(res => {\n        this.categoryList = res.data || [];\n      });\n      this.$request.get(\"/blog/selectById/\" + this.blogId).then(res => {\n        this.form = res.data || {};\n        console.log(\"from newBlog(form):\", this.form);\n        if (this.form.id) {\n          setTimeout(() => {\n            this.content = JSON.parse(this.form.content || '[]');\n            this.tagsArr = JSON.parse(this.form.tags || '[]');\n          }, 0);\n        }\n      });\n    },\n    handleCoverSuccess(res) {\n      this.form.cover = res.data;\n      console.log(\"from newBlog\", this.form.cover);\n    },\n    handleChange(value) {\n      if (value.length > 1) {\n        this.tagsArr = [value[value.length - 1]];\n      }\n    }\n  }\n};","map":{"version":3,"names":["proButton","name","components","data","form","user","JSON","parse","localStorage","getItem","rules","blogId","$route","query","ids","categoryList","tagsArr","content","options","uploadImg","file","src","fileData","FormData","append","$request","post","then","res","url","catch","error","console","dialogue","leftImg","rightImg","maxEmoticon","minEmoticon","require","created","load","mounted","methods","onLayEditor","save","$refs","formRef","validate","valid","tags","stringify","id","method","code","$message","success","msg","get","log","setTimeout","handleCoverSuccess","cover","handleChange","value","length"],"sources":["src/views/front/newBlog.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div>\r\n            <div class=\"user-container myCenter my-animation-hideToShow\">\r\n                <!-- 背景图片 -->\r\n                <el-image class=\"my-el-image\" style=\"position: absolute\" v-once lazy :src=\"src\" fit=\"cover\">\r\n                    <div slot=\"error\" class=\"image-slot\"></div>\r\n                </el-image>\r\n                <div class=\"shadow-box-mini user-info\" style=\"display: flex\">\r\n                    <div class=\"user-left\">\r\n                        <div>\r\n                            <div style=\"margin: 40px auto 40px 0px;\">发表/编辑</div>\r\n                        </div>\r\n                        <el-form :model=\"form\" label-width=\"100px\" style=\"padding-right: 50px\" :rules=\"rules\"\r\n                            ref=\"formRef\">\r\n                            <el-form-item label=\"标题\" prop=\"title\">\r\n                                <el-input v-model=\"form.title\" placeholder=\"标题\"></el-input>\r\n                            </el-form-item>\r\n                            <el-form-item label=\"简介\" prop=\"descr\">\r\n                                <el-input type=\"textarea\" v-model=\"form.descr\" placeholder=\"简介\"></el-input>\r\n                            </el-form-item>\r\n                            <el-form-item label=\"封面\" prop=\"cover\">\r\n                                <el-upload :action=\"$baseUrl + '/qiniu/image'\" :headers=\"{ token: user.token }\"\r\n                                    list-type=\"picture\" :on-success=\"handleCoverSuccess\">\r\n                                    <el-button type=\"primary\">上传封面</el-button>\r\n                                </el-upload>\r\n                            </el-form-item>\r\n                            <el-form-item label=\"分类\" prop=\"categoryId\">\r\n                                <el-select v-model=\"form.categoryId\" style=\"width: 100%\">\r\n                                    <el-option v-for=\"item in categoryList\" :key=\"item.id\" :value=\"item.id\"\r\n                                        :label=\"item.name\"></el-option>\r\n                                </el-select>\r\n                            </el-form-item>\r\n                            <el-form-item label=\"标签\" prop=\"tags\">\r\n                                <el-select v-model=\"tagsArr\" multiple filterable allow-create default-first-option\r\n                                    @change=\"handleChange\" style=\"width: 100%\">\r\n                                    <el-option value=\"Java\"></el-option>\r\n                                    <el-option value=\"面试\"></el-option>\r\n                                    <el-option value=\"Vue\"></el-option>\r\n                                    <el-option value=\"大数据\"></el-option>\r\n                                    <el-option value=\"算法\"></el-option>\r\n                                    <el-option value=\"程序员\"></el-option>\r\n                                    <el-option value=\"我们应该怎样活着\"></el-option>\r\n                                    <el-option value=\"被偷走的那几年\"></el-option>\r\n                                </el-select>\r\n                            </el-form-item>\r\n                            <el-form-item label=\"内容\" prop=\"content\">\r\n                                <!-- 编辑 -->\r\n                                <div class=\"w-e-text\">\r\n                                    <layEditor :content=\"content\" @change=\"onLayEditor\"></layEditor>\r\n                                </div>\r\n                            </el-form-item>\r\n                        </el-form>\r\n                        <div>\r\n                            <proButton :info=\"'保存'\" :before=\"'rgb(131, 123, 199)'\"\r\n                                :after=\"'linear-gradient(45deg, #f43f3b, #ec008c)'\" @click.native=\"save()\"></proButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <!-- <div class=\"user-right\"></div> -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport proButton from '@/components/proButton.vue';\r\n\r\nexport default {\r\n    name: \"newBlog\",\r\n    components: {\r\n        proButton\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            form: {},\r\n            user: JSON.parse(localStorage.getItem('ADMIN') || '{}'),\r\n            rules: {},\r\n            blogId: this.$route.query.blogId,\r\n            ids: [],\r\n            categoryList: [],\r\n            tagsArr: [],\r\n            content: [],\r\n            options: {\r\n                uploadImg(file, src) {\r\n                    // 创建一个新的 FormData 对象\r\n                    let fileData = new FormData();\r\n\r\n                    // 将文件添加到 fileData 中，名字为 'file'\r\n                    fileData.append(\"file\", file);\r\n\r\n                    return this.$request.post(\"/files/emotion/upload\", fileData).then(res => {\r\n                        // 上传成功，返回上传后的图片地址\r\n                        return src = res.data.url\r\n                    }).catch(error => {\r\n                        // 上传失败，可以根据需要处理错误\r\n                        console.error('上传失败:', error);\r\n                        throw error;\r\n                    })\r\n                },\r\n                dialogue: [\r\n                    {\r\n                        // 左边人物图片\r\n                        leftImg: \"https://lay-editor.gitee.io/lay-editor-doc/dialogue/hamster-1.png\",\r\n                        // 右边人物图片\r\n                        rightImg: \"https://lay-editor.gitee.io/lay-editor-doc/dialogue/hamster-2.png\",\r\n                    },\r\n                ],\r\n                maxEmoticon: [\r\n                    {},\r\n                    {},\r\n                ],\r\n                // 配置 小图表情包\r\n                minEmoticon: [\r\n                    {},\r\n                ],\r\n            },\r\n            src: require(\"@/assets/imgs/boyWithCat.jpg\"),\r\n        }\r\n    },\r\n    created() {\r\n        this.load(1)\r\n    },\r\n    mounted() { },\r\n    methods: {\r\n        // 编辑器内容发生变化触发\r\n        onLayEditor(data) {\r\n            // console.log(\"编辑器\", data)\r\n        },\r\n        save() {   // 保存按钮触发的逻辑  它会触发新增或者更新\r\n            this.$refs.formRef.validate((valid) => {\r\n                if (valid) {\r\n                    this.form.tags = JSON.stringify(this.tagsArr)  // 将JSON数组转换成JSON字符串存储到数据库\r\n                    this.form.content = JSON.stringify(this.content);  // 将编辑器内容数组转换为字符串并保存到 form.content\r\n                    this.$request({\r\n                        url: this.form.id ? '/blog/update' : '/blog/add',\r\n                        method: this.form.id ? 'PUT' : 'POST',\r\n                        data: this.form\r\n                    }).then(res => {\r\n                        if (res.code === '200') {  // 表示成功保存\r\n                            this.$message.success('保存成功')\r\n                        } else {\r\n                            this.$message.error(res.msg)  // 弹出错误的信息\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        },\r\n        load() {\r\n            this.$request.get(\"/category/selectAll\").then(res => {\r\n                this.categoryList = res.data || []\r\n            })\r\n\r\n            this.$request.get(\"/blog/selectById/\" + this.blogId).then(res => {\r\n                this.form = res.data || {}\r\n                console.log(\"from newBlog(form):\", this.form)\r\n                if (this.form.id) {\r\n                    setTimeout(() => {\r\n                        this.content = JSON.parse(this.form.content || '[]')\r\n                        this.tagsArr = JSON.parse(this.form.tags || '[]')\r\n                    }, 0)\r\n                }\r\n            })\r\n        },\r\n        handleCoverSuccess(res) {\r\n            this.form.cover = res.data\r\n            console.log(\"from newBlog\",this.form.cover)\r\n        },\r\n        handleChange(value) {\r\n            if (value.length > 1) {\r\n                this.tagsArr = [value[value.length - 1]];\r\n            }\r\n        },\r\n    }\r\n}\r\n\r\n</script>\r\n<style scoped>\r\n.user-container {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: relative;\r\n}\r\n\r\n/* 以my-animation-开头的class */\r\n[class*=my-animation-] {\r\n    animation-duration: 1s;\r\n    animation-timing-function: ease-out;\r\n    animation-fill-mode: both;\r\n}\r\n\r\n.my-animation-hideToShow {\r\n    animation-name: hideToShow\r\n}\r\n\r\n/* 阴影 */\r\n.shadow-box-mini {\r\n    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.user-info {\r\n    width: 80%;\r\n    z-index: 10;\r\n    margin-top: 70px;\r\n    height: calc(100vh - 90px);\r\n    margin-bottom: 20px;\r\n    border-radius: 10px;\r\n    overflow: hidden;\r\n}\r\n\r\n.user-left {\r\n    width: 100%;\r\n    background: rgba(255, 255, 255, 0.7);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    overflow-y: auto;\r\n    padding: 20px;\r\n}\r\n</style>"],"mappings":"AAkEA,OAAAA,SAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EAEAG,KAAA;IACA;MACAC,IAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,KAAA;MACAC,MAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAF,MAAA;MACAG,GAAA;MACAC,YAAA;MACAC,OAAA;MACAC,OAAA;MACAC,OAAA;QACAC,UAAAC,IAAA,EAAAC,GAAA;UACA;UACA,IAAAC,QAAA,OAAAC,QAAA;;UAEA;UACAD,QAAA,CAAAE,MAAA,SAAAJ,IAAA;UAEA,YAAAK,QAAA,CAAAC,IAAA,0BAAAJ,QAAA,EAAAK,IAAA,CAAAC,GAAA;YACA;YACA,OAAAP,GAAA,GAAAO,GAAA,CAAAzB,IAAA,CAAA0B,GAAA;UACA,GAAAC,KAAA,CAAAC,KAAA;YACA;YACAC,OAAA,CAAAD,KAAA,UAAAA,KAAA;YACA,MAAAA,KAAA;UACA;QACA;QACAE,QAAA,GACA;UACA;UACAC,OAAA;UACA;UACAC,QAAA;QACA,EACA;QACAC,WAAA,GACA,IACA,GACA;QACA;QACAC,WAAA,GACA;MAEA;MACAhB,GAAA,EAAAiB,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,IAAA;EACA;EACAC,QAAA;EACAC,OAAA;IACA;IACAC,YAAAxC,IAAA;MACA;IAAA,CACA;IACAyC,KAAA;MAAA;MACA,KAAAC,KAAA,CAAAC,OAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAA5C,IAAA,CAAA6C,IAAA,GAAA3C,IAAA,CAAA4C,SAAA,MAAAlC,OAAA;UACA,KAAAZ,IAAA,CAAAa,OAAA,GAAAX,IAAA,CAAA4C,SAAA,MAAAjC,OAAA;UACA,KAAAQ,QAAA;YACAI,GAAA,OAAAzB,IAAA,CAAA+C,EAAA;YACAC,MAAA,OAAAhD,IAAA,CAAA+C,EAAA;YACAhD,IAAA,OAAAC;UACA,GAAAuB,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAyB,IAAA;cAAA;cACA,KAAAC,QAAA,CAAAC,OAAA;YACA;cACA,KAAAD,QAAA,CAAAvB,KAAA,CAAAH,GAAA,CAAA4B,GAAA;YACA;UACA;QACA;MACA;IACA;IACAhB,KAAA;MACA,KAAAf,QAAA,CAAAgC,GAAA,wBAAA9B,IAAA,CAAAC,GAAA;QACA,KAAAb,YAAA,GAAAa,GAAA,CAAAzB,IAAA;MACA;MAEA,KAAAsB,QAAA,CAAAgC,GAAA,4BAAA9C,MAAA,EAAAgB,IAAA,CAAAC,GAAA;QACA,KAAAxB,IAAA,GAAAwB,GAAA,CAAAzB,IAAA;QACA6B,OAAA,CAAA0B,GAAA,6BAAAtD,IAAA;QACA,SAAAA,IAAA,CAAA+C,EAAA;UACAQ,UAAA;YACA,KAAA1C,OAAA,GAAAX,IAAA,CAAAC,KAAA,MAAAH,IAAA,CAAAa,OAAA;YACA,KAAAD,OAAA,GAAAV,IAAA,CAAAC,KAAA,MAAAH,IAAA,CAAA6C,IAAA;UACA;QACA;MACA;IACA;IACAW,mBAAAhC,GAAA;MACA,KAAAxB,IAAA,CAAAyD,KAAA,GAAAjC,GAAA,CAAAzB,IAAA;MACA6B,OAAA,CAAA0B,GAAA,sBAAAtD,IAAA,CAAAyD,KAAA;IACA;IACAC,aAAAC,KAAA;MACA,IAAAA,KAAA,CAAAC,MAAA;QACA,KAAAhD,OAAA,IAAA+C,KAAA,CAAAA,KAAA,CAAAC,MAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}