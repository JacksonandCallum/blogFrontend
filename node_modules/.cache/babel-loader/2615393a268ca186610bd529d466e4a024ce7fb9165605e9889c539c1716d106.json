{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router\";\n\n// 创建可一个新的axios对象\nconst request = axios.create({\n  baseURL: process.env.VUE_APP_BASEURL,\n  // 后端的接口地址  ip:port\n  timeout: 30000 // 30s请求超时\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // 设置请求头格式\n  // let user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}')  // 获取缓存的用户信息\n  let user = JSON.parse(localStorage.getItem(userRoleKey()) || '{}'); // 获取缓存的用户信息\n  config.headers['token'] = user.token; // 设置请求头\n\n  return config;\n}, error => {\n  console.error('request error: ' + error); // for debug\n  return Promise.reject(error);\n});\n\n// 根据用户角色直接返回对应的 localStorage 键名\nfunction userRoleKey() {\n  let user = JSON.parse(localStorage.getItem(\"ADMIN\") || '{}');\n  return user.role === 'ADMIN' ? 'ADMIN' : 'USER';\n}\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  if (res.code === '401') {\n    // router.push('/login')\n    console.log(\"from request\", res.code);\n    // router.push('/front/home')\n    store.commit(\"loadCurrentUser\", {});\n    localStorage.removeItem(\"USER\");\n    store.commit(\"loadCurrentAdmin\", {});\n    localStorage.removeItem(\"ADMIN\");\n    window.location.href = constant.webURL + \"/user\";\n  }\n  return res;\n}, error => {\n  console.error('response error: ' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","process","env","VUE_APP_BASEURL","timeout","interceptors","use","config","headers","user","JSON","parse","localStorage","getItem","userRoleKey","token","error","console","Promise","reject","role","response","res","data","code","log","store","commit","removeItem","window","location","href","constant","webURL"],"sources":["D:/Java_Projects/MYBLOG/frontend/blog-frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\n\r\n// 创建可一个新的axios对象\r\nconst request = axios.create({\r\n    baseURL: process.env.VUE_APP_BASEURL,   // 后端的接口地址  ip:port\r\n    timeout: 30000                          // 30s请求超时\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';        // 设置请求头格式\r\n    // let user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}')  // 获取缓存的用户信息\r\n    let user = JSON.parse(localStorage.getItem(userRoleKey()) || '{}')  // 获取缓存的用户信息\r\n    config.headers['token'] = user.token  // 设置请求头\r\n\r\n    return config\r\n}, error => {\r\n    console.error('request error: ' + error) // for debug\r\n    return Promise.reject(error)\r\n});\r\n\r\n// 根据用户角色直接返回对应的 localStorage 键名\r\nfunction userRoleKey() {\r\n    let user = JSON.parse(localStorage.getItem(\"ADMIN\") || '{}');\r\n    return user.role === 'ADMIN' ? 'ADMIN' : 'USER';\r\n}\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        if (res.code === '401') {\r\n            // router.push('/login')\r\n            console.log(\"from request\",res.code)\r\n            // router.push('/front/home')\r\n            store.commit(\"loadCurrentUser\", {});\r\n      localStorage.removeItem(\"USER\");\r\n      store.commit(\"loadCurrentAdmin\", {});\r\n      localStorage.removeItem(\"ADMIN\");\r\n      window.location.href = constant.webURL + \"/user\";\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.error('response error: ' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,eAAe;EAAI;EACxCC,OAAO,EAAE,KAAK,CAA0B;AAC5C,CAAC,CAAC;;AAEF;AACA;AACA;AACAN,OAAO,CAACO,YAAY,CAACP,OAAO,CAACQ,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC,CAAC,CAAQ;EAC1E;EACA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE;EACpEP,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,IAAI,CAACM,KAAK,EAAE;;EAEtC,OAAOR,MAAM;AACjB,CAAC,EAAES,KAAK,IAAI;EACRC,OAAO,CAACD,KAAK,CAAC,iBAAiB,GAAGA,KAAK,CAAC,EAAC;EACzC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA,SAASF,WAAWA,CAAA,EAAG;EACnB,IAAIL,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;EAC5D,OAAOJ,IAAI,CAACW,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,MAAM;AACnD;;AAEA;AACA;AACAtB,OAAO,CAACO,YAAY,CAACgB,QAAQ,CAACf,GAAG,CAC7Be,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEvB;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGZ,IAAI,CAACC,KAAK,CAACW,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,IAAIA,GAAG,CAACE,IAAI,KAAK,KAAK,EAAE;IACpB;IACAP,OAAO,CAACQ,GAAG,CAAC,cAAc,EAACH,GAAG,CAACE,IAAI,CAAC;IACpC;IACAE,KAAK,CAACC,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;IACzCf,YAAY,CAACgB,UAAU,CAAC,MAAM,CAAC;IAC/BF,KAAK,CAACC,MAAM,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;IACpCf,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGC,QAAQ,CAACC,MAAM,GAAG,OAAO;EAC9C;EACA,OAAOX,GAAG;AACd,CAAC,EACDN,KAAK,IAAI;EACLC,OAAO,CAACD,KAAK,CAAC,kBAAkB,GAAGA,KAAK,CAAC,EAAC;EAC1C,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAelB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}