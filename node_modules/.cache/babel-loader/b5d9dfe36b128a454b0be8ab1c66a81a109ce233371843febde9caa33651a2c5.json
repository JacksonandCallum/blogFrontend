{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\", \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\", \"for\", \"from\", \"global\", \"if\", \"import\", \"lambda\", \"pass\", \"raise\", \"return\", \"try\", \"while\", \"with\", \"yield\", \"in\", \"False\", \"True\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\", \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\", \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\", \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\", \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\", \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\", \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\", \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\", \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\", \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\", \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins).concat([\"exec\", \"print\"]));\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n  CodeMirror.defineMode(\"python\", function (conf, parserConf) {\n    var ERRORCLASS = \"error\";\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n    //               (Backwards-compatibility with old, cumbersome config system)\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters, parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/];\n    for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1);\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n    var myKeywords = commonKeywords,\n      myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined) myKeywords = myKeywords.concat(parserConf.extra_keywords);\n    if (parserConf.extra_builtins != undefined) myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3);\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers || /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"None\", \"aiter\", \"anext\", \"async\", \"await\", \"breakpoint\", \"match\", \"case\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\", \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\", \"unichr\", \"unicode\", \"xrange\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins);\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\";\n      if (sol) state.indent = stream.indentation();\n      // Handle scope changes\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset) pushPyScope(state);else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\") state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state)) style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n      return tokenBaseInner(stream, state);\n    }\n    function tokenBaseInner(stream, state, inFormat) {\n      if (stream.eatSpace()) return null;\n\n      // Handle Comments\n      if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n          floatLiteral = true;\n        }\n        if (stream.match(/^[\\d_]+\\.\\d*/)) {\n          floatLiteral = true;\n        }\n        if (stream.match(/^\\.\\d+/)) {\n          floatLiteral = true;\n        }\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n        // Binary\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n        // Octal\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n        // Decimal\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i);\n          // TODO - Can you have imaginary longs?\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n      for (var i = 0; i < operators.length; i++) if (stream.match(operators[i])) return \"operator\";\n      if (stream.match(delimiters)) return \"punctuation\";\n      if (state.lastToken == \".\" && stream.match(identifiers)) return \"property\";\n      if (stream.match(keywords) || stream.match(wordOperators)) return \"keyword\";\n      if (stream.match(builtins)) return \"builtin\";\n      if (stream.match(/^(self|cls)\\b/)) return \"variable-2\";\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\") return \"def\";\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return inFormat ? null : ERRORCLASS;\n    }\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) delimiter = delimiter.substr(1);\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n      function tokenNestedExpr(depth) {\n        return function (stream, state) {\n          var inner = tokenBaseInner(stream, state, true);\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1);\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);else state.tokenize = tokenString;\n            }\n          }\n          return inner;\n        };\n      }\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0);\n            if (stream.current()) return OUTCLASS;else return state.tokenize(stream, state);\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0) delimiter = delimiter.substr(1);\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) return ERRORCLASS;else state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop();\n      state.scopes.push({\n        offset: top(state).offset + conf.indentUnit,\n        type: \"py\",\n        align: null\n      });\n    }\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1;\n      state.scopes.push({\n        offset: state.indent + hangingIndent,\n        type: type,\n        align: align\n      });\n    }\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n      return top(state).offset != indented;\n    }\n    function tokenLexer(stream, state) {\n      if (stream.sol()) {\n        state.beginningOfLine = true;\n        state.dedent = false;\n      }\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle decorators\n      if (state.beginningOfLine && current == \"@\") return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n      if ((style == \"variable\" || style == \"builtin\") && state.lastToken == \"meta\") style = \"meta\";\n\n      // Handle scope changes.\n      if (current == \"pass\" || current == \"return\") state.dedent = true;\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false)) pushPyScope(state);\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1) pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n        delimiter_index = \"])}\".indexOf(current);\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent;else return ERRORCLASS;\n        }\n      }\n      if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1) state.scopes.pop();\n      return style;\n    }\n    var external = {\n      startState: function (basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{\n            offset: basecolumn || 0,\n            type: \"py\",\n            align: null\n          }],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n      token: function (stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n        if (style && style != \"comment\") state.lastToken = style == \"keyword\" || style == \"punctuation\" ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n        if (stream.eol() && state.lambda) state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n      indent: function (state, textAfter) {\n        if (state.tokenize != tokenBase) return state.tokenize.isString ? CodeMirror.Pass : 0;\n        var scope = top(state);\n        var closing = scope.type == textAfter.charAt(0) || scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter);\n        if (scope.align != null) return scope.align - (closing ? 1 : 0);else return scope.offset - (closing ? hangingIndent : 0);\n      },\n      electricInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      closeBrackets: {\n        triples: \"'\\\"\"\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n  var words = function (str) {\n    return str.split(\" \");\n  };\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \" + \"extern gil include nogil property public \" + \"readonly struct union DEF IF ELIF ELSE\")\n  });\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","wordRegexp","words","RegExp","join","wordOperators","commonKeywords","commonBuiltins","registerHelper","concat","top","state","scopes","length","defineMode","conf","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","indentUnit","myKeywords","myBuiltins","extra_keywords","undefined","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","isFmtString","current","toLowerCase","indexOf","tokenize","tokenStringFactory","formatStringFactory","next","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","singleLineStringErrors","isString","pop","push","align","pushBracketScope","column","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","slice","external","startState","basecolumn","token","addErr","textAfter","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","defineMIME","str","split","name"],"sources":["D:/Java_Projects/MYBLOG-备份/frontend/blog-frontend/node_modules/codemirror/mode/python/python.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                        \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                        \"for\", \"from\", \"global\", \"if\", \"import\",\n                        \"lambda\", \"pass\", \"raise\", \"return\",\n                        \"try\", \"while\", \"with\", \"yield\", \"in\", \"False\", \"True\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                        \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                        \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                        \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                        \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                        \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                        \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                        \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                        \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                        \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                        \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins).concat([\"exec\", \"print\"]));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function(conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n    //               (Backwards-compatibility with old, cumbersome config system)\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                     parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n    for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n\n    var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined)\n      myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n    if (parserConf.extra_builtins != undefined)\n      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"None\", \"aiter\", \"anext\", \"async\", \"await\", \"breakpoint\", \"match\", \"case\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                      \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                      \"unichr\", \"unicode\", \"xrange\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins);\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\"\n      if (sol) state.indent = stream.indentation()\n      // Handle scope changes\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset)\n            pushPyScope(state);\n          else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n            state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state))\n            style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state, inFormat) {\n      if (stream.eatSpace()) return null;\n\n      // Handle Comments\n      if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n        if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n        if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n        // Binary\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n        // Octal\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n        // Decimal\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i);\n          // TODO - Can you have imaginary longs?\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++)\n        if (stream.match(operators[i])) return \"operator\"\n\n      if (stream.match(delimiters)) return \"punctuation\";\n\n      if (state.lastToken == \".\" && stream.match(identifiers))\n        return \"property\";\n\n      if (stream.match(keywords) || stream.match(wordOperators))\n        return \"keyword\";\n\n      if (stream.match(builtins))\n        return \"builtin\";\n\n      if (stream.match(/^(self|cls)\\b/))\n        return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\")\n          return \"def\";\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return inFormat ? null :ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function(stream, state) {\n          var inner = tokenBaseInner(stream, state, true)\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1)\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n              else state.tokenize = tokenString\n            }\n          }\n          return inner\n        }\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0)\n            if (stream.current()) return OUTCLASS;\n            else return state.tokenize(stream, state)\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop()\n      state.scopes.push({offset: top(state).offset + conf.indentUnit,\n                         type: \"py\",\n                         align: null})\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1\n      state.scopes.push({offset: state.indent + hangingIndent,\n                         type: type,\n                         align: align})\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) {\n        state.beginningOfLine = true;\n        state.dedent = false;\n      }\n\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle decorators\n      if (state.beginningOfLine && current == \"@\")\n        return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n\n      if ((style == \"variable\" || style == \"builtin\")\n          && state.lastToken == \"meta\")\n        style = \"meta\";\n\n      // Handle scope changes.\n      if (current == \"pass\" || current == \"return\")\n        state.dedent = true;\n\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false))\n        pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1)\n          pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n        delimiter_index = \"])}\".indexOf(current);\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent\n          else return ERRORCLASS;\n        }\n      }\n      if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1)\n        state.scopes.pop();\n\n      return style;\n    }\n\n    var external = {\n      startState: function(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{offset: basecolumn || 0, type: \"py\", align: null}],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\")\n          state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n\n        if (stream.eol() && state.lambda)\n          state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n\n      indent: function(state, textAfter) {\n        if (state.tokenize != tokenBase)\n          return state.tokenize.isString ? CodeMirror.Pass : 0;\n\n        var scope = top(state)\n        var closing = scope.type == textAfter.charAt(0) ||\n            scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter)\n        if (scope.align != null)\n          return scope.align - (closing ? 1 : 0)\n        else\n          return scope.offset - (closing ? hangingIndent : 0)\n      },\n\n      electricInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      closeBrackets: {triples: \"'\\\"\"},\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function(str) { return str.split(\" \"); };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                          \"extern gil include nogil property public \"+\n                          \"readonly struct union DEF IF ELIF ELSE\")\n  });\n\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}