{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst createUid = \"uid\";\nimport toolBar from \"./tools\";\nimport editTools from \"./edit-tools\";\nimport titleCard from \"./temp/title/index\";\nimport imageCard from \"./temp/images/index\";\nimport defaultText from \"./temp/text/default-text\";\nimport codeBlock from \"./temp/codeBlock/codeBlock\";\nimport linkBlock from \"./temp/linkBlock/linkBlock\";\nimport dialogue from \"./temp/dialogue/dialogue\";\nimport emoticon from \"./temp/emoticon/emoticon\";\nimport extendCard from \"./temp/extendCard/extendCard\";\nimport $publish from \"./config/Publish\";\nimport config from \"./config/index\";\nexport default {\n  name: \"modularEditor\",\n  components: {\n    toolBar,\n    editTools,\n    titleCard,\n    defaultText,\n    codeBlock,\n    imageCard,\n    linkBlock,\n    dialogue,\n    emoticon,\n    extendCard\n  },\n  props: {\n    content: {\n      default() {\n        return [];\n      }\n    },\n    options: {\n      default() {\n        return {};\n      }\n    }\n  },\n  data() {\n    return {\n      editorData: [],\n      commandState: [],\n      range: 0,\n      // 光标位置\n      isFullscreen: false,\n      //是否全屏\n      current: null,\n      //当前\n      currentEdit: null //当前\n    };\n  },\n  watch: {\n    content: {\n      immediate: true,\n      handler() {\n        this.editorData = this.content;\n      }\n    },\n    options: {\n      deep: true,\n      immediate: true,\n      handler() {\n        config.setConfig(this.options);\n      }\n    }\n  },\n  created() {\n    config.setConfig(this.options);\n  },\n  mounted() {\n    this.onPaste();\n    this.onkeydown();\n  },\n  methods: {\n    // 监听bar\n    onBar(item) {\n      if (this.currentEdit != null && this.currentEdit != this.editorData.length - 1) {\n        this.editorData.splice(this.currentEdit + 1, 0, item);\n      } else {\n        this.editorData.push(item);\n      }\n      this.refresh();\n      this.onPaste();\n    },\n    // 监听keydown click\n    onkeydown() {\n      let self = this;\n      document.onkeydown = function (e) {\n        if (e.key == \"s\") {\n          self.$emit(\"save\");\n          self.refresh();\n          return false;\n        }\n      };\n      document.addEventListener(\"click\", () => {\n        self.current = null;\n        self.currentEdit = null;\n        this.onMenuControl();\n      });\n    },\n    // 监听剪切板\n    onPaste() {\n      this.$nextTick(() => {\n        setTimeout(() => {\n          let richText = document.querySelectorAll(\".clear-paste-style\");\n          richText.forEach(dom => {\n            dom.addEventListener(\"paste\", this.optimizePasteEvent);\n          });\n        }, 0);\n      });\n    },\n    // 选择编辑\n    selectEdit(index) {\n      this.current = index;\n      this.currentEdit = index;\n      this.onMenuControl();\n      this.refresh();\n    },\n    // 监听编辑\n    onEdit(data, item) {\n      item.content = data;\n      this.refresh();\n      this.getRange();\n    },\n    deleteItem(index) {\n      this.editorData.splice(index, 1);\n      this.refresh();\n    },\n    downUp(index) {\n      if (index == 0) return;\n      let item = this.editorData.splice(index, 1);\n      this.editorData.splice(index - 1, 0, item[0]);\n      this.current = index - 1;\n      this.currentEdit = index - 1;\n      this.refresh();\n    },\n    downMove(index) {\n      if (index == this.editorData.length - 1) return;\n      let item = this.editorData.splice(index, 1)[0];\n      this.editorData.splice(index + 1, 0, item);\n      this.current = index + 1;\n      this.currentEdit = index + 1;\n      this.refresh();\n    },\n    refresh() {\n      this.$emit(\"change\", this.editorData);\n    },\n    // 监听输入状态\n    onCommandState(data) {\n      this.commandState = data;\n    },\n    fullscreen() {\n      this.isFullscreen = !this.isFullscreen;\n    },\n    // 获取光标位置\n    getRange() {\n      var supportRange = typeof document.createRange === \"function\";\n      let selection = document.getSelection(),\n        range;\n      if (supportRange) {\n        selection = document.getSelection();\n        if (selection.getRangeAt && selection.rangeCount) {\n          range = document.getSelection().getRangeAt(0);\n        }\n      } else {\n        range = document.selection.createRange();\n      }\n      this.range = range;\n    },\n    onMenuControl() {\n      $publish.emit(\"initOpenState\");\n    },\n    // 监听剪贴板 粘贴去除格式\n    optimizePasteEvent(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      let text = \"\";\n      const event = e.originalEvent || e;\n      // 获取 剪贴板 格式化后的内容\n      if (event.clipboardData && event.clipboardData.getData) {\n        text = event.clipboardData.getData(\"text/plain\");\n      } else if (window.clipboardData && window.clipboardData.getData) {\n        text = window.clipboardData.getData(\"Text\");\n      }\n      // 插入内容\n      if (document.queryCommandSupported(\"insertText\")) {\n        document.execCommand(\"insertHTML\", true, text);\n        return;\n      } else if (document.execCommand) {\n        document.execCommand(\"paste\", false, text);\n        return;\n      }\n    }\n  }\n};","map":{"version":3,"names":["createUid","toolBar","editTools","titleCard","imageCard","defaultText","codeBlock","linkBlock","dialogue","emoticon","extendCard","$publish","config","name","components","props","content","default","options","data","editorData","commandState","range","isFullscreen","current","currentEdit","watch","immediate","handler","deep","setConfig","created","mounted","onPaste","onkeydown","methods","onBar","item","length","splice","push","refresh","self","document","e","key","$emit","addEventListener","onMenuControl","$nextTick","setTimeout","richText","querySelectorAll","forEach","dom","optimizePasteEvent","selectEdit","index","onEdit","getRange","deleteItem","downUp","downMove","onCommandState","fullscreen","supportRange","createRange","selection","getSelection","getRangeAt","rangeCount","emit","stopPropagation","preventDefault","text","event","originalEvent","clipboardData","getData","window","queryCommandSupported","execCommand"],"sources":["node_modules/vue2-lay-editor/index.vue"],"sourcesContent":["<template>\n  <div :class=\"['lay-editor', { fullscreen: isFullscreen }]\">\n    <div\n      @click.stop=\"onMenuControl\"\n      class=\"layeditor-container\"\n      :style=\"{ width: isFullscreen ? '800px' : '100%' }\"\n    >\n      <!-- 标题,文本,代码块,图片,链接,色块,引用,状态,对话,外链 -->\n      <div class=\"layeditor-tools\">\n        <div class=\"layeditor-item\">\n          <tool-bar\n            :open=\"isFullscreen\"\n            @fullscreen=\"fullscreen\"\n            @change=\"onBar\"\n          ></tool-bar>\n        </div>\n        <div class=\"layeditor-item\">\n          <edit-tools :range=\"range\" :state=\"commandState\"></edit-tools>\n        </div>\n      </div>\n      <div id=\"editor-section\" class=\"editor-section\">\n        <div\n          @click.stop=\"selectEdit(index)\"\n          :class=\"['layeditor-item', { active: index == current }]\"\n          v-for=\"(item, index) in editorData\"\n          :key=\"index\"\n        >\n          <!-- 标题 -->\n          <title-card\n            :token=\"item.token\"\n            @change=\"(data) => onEdit(data, item)\"\n            @commandState=\"onCommandState\"\n            v-if=\"item.type == 'title'\"\n            :themeType=\"item.themeType\"\n            :content=\"item.content\"\n            :index=\"index\"\n            :current=\"current\"\n          ></title-card>\n          <!-- 文本,引用,色块,状态 -->\n          <default-text\n            :token=\"item.token\"\n            :themeType=\"item.type\"\n            :content=\"item.content\"\n            :index=\"index\"\n            :current=\"current\"\n            @change=\"(data) => onEdit(data, item)\"\n            @commandState=\"onCommandState\"\n            v-if=\"\n              ['text', 'state', 'quote', 'colorblock', 'text-type-1'].includes(\n                item.type\n              )\n            \"\n          ></default-text>\n          <!-- 代码块 -->\n          <code-block\n            :token=\"item.token\"\n            v-if=\"item.type == 'code'\"\n            :content=\"item.content\"\n            @change=\"(data) => onEdit(data, item)\"\n          ></code-block>\n          <!-- 图片 -->\n          <image-card\n            :token=\"item.token\"\n            @change=\"(data) => onEdit(data, item)\"\n            :content=\"item.content\"\n            v-if=\"item.type == 'image-one'\"\n          ></image-card>\n          <!-- 链接  -->\n          <link-block\n            :token=\"item.token\"\n            @change=\"(data) => onEdit(data, item)\"\n            :content=\"item.content\"\n            v-if=\"item.type == 'link'\"\n          ></link-block>\n          <!-- 对话 -->\n          <dialogue\n            :token=\"item.token\"\n            @change=\"(data) => onEdit(data, item)\"\n            :content=\"item.content\"\n            v-if=\"item.type == 'dialogue'\"\n          ></dialogue>\n          <!-- 表情包 -->\n          <emoticon\n            :token=\"item.token\"\n            @change=\"(data) => onEdit(data, item)\"\n            :content=\"item.content\"\n            v-if=\"item.type == 'emoticon'\"\n          ></emoticon>\n          <!-- 扩展 -->\n          <extend-card\n            :token=\"item.token\"\n            @change=\"(data) => onEdit(data, item)\"\n            :content=\"item.content\"\n            v-if=\"item.type == 'extend'\"\n          ></extend-card>\n          <div\n            @click.stop=\"onMenuControl\"\n            v-if=\"index == current\"\n            class=\"layeditor-control\"\n          >\n            <div @click=\"deleteItem(index)\">\n              <img src=\"./assets/del.png\" alt=\"\" />\n            </div>\n            <div @click=\"downUp(index)\">\n              <img src=\"./assets/up.png\" alt=\"\" />\n            </div>\n            <div @click=\"downMove(index)\">\n              <img src=\"./assets/down.png\" alt=\"\" />\n            </div>\n          </div>\n        </div>\n        <div style=\"height: 200px\"></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nconst createUid = \"uid\";\nimport toolBar from \"./tools\";\nimport editTools from \"./edit-tools\";\nimport titleCard from \"./temp/title/index\";\nimport imageCard from \"./temp/images/index\";\nimport defaultText from \"./temp/text/default-text\";\nimport codeBlock from \"./temp/codeBlock/codeBlock\";\nimport linkBlock from \"./temp/linkBlock/linkBlock\";\nimport dialogue from \"./temp/dialogue/dialogue\";\nimport emoticon from \"./temp/emoticon/emoticon\";\nimport extendCard from \"./temp/extendCard/extendCard\";\nimport $publish from \"./config/Publish\";\nimport config from \"./config/index\";\n\nexport default {\n  name: \"modularEditor\",\n  components: {\n    toolBar,\n    editTools,\n    titleCard,\n    defaultText,\n    codeBlock,\n    imageCard,\n    linkBlock,\n    dialogue,\n    emoticon,\n    extendCard,\n  },\n  props: {\n    content: {\n      default() {\n        return [];\n      },\n    },\n    options: {\n      default() {\n        return {};\n      },\n    },\n  },\n  data() {\n    return {\n      editorData: [],\n      commandState: [],\n      range: 0, // 光标位置\n      isFullscreen: false, //是否全屏\n      current: null, //当前\n      currentEdit: null, //当前\n    };\n  },\n\n  watch: {\n    content: {\n      immediate: true,\n      handler() {\n        this.editorData = this.content;\n      },\n    },\n    options: {\n      deep: true,\n      immediate: true,\n      handler() {\n        config.setConfig(this.options);\n      },\n    },\n  },\n  created() {\n    config.setConfig(this.options);\n  },\n  mounted() {\n    this.onPaste();\n    this.onkeydown();\n  },\n  methods: {\n    // 监听bar\n    onBar(item) {\n      if (\n        this.currentEdit != null &&\n        this.currentEdit != this.editorData.length - 1\n      ) {\n        this.editorData.splice(this.currentEdit + 1, 0, item);\n      } else {\n        this.editorData.push(item);\n      }\n      this.refresh();\n      this.onPaste();\n    },\n    // 监听keydown click\n    onkeydown() {\n      let self = this;\n      document.onkeydown = function (e) {\n        if (e.key == \"s\") {\n          self.$emit(\"save\");\n          self.refresh();\n          return false;\n        }\n      };\n\n      document.addEventListener(\"click\", () => {\n        self.current = null;\n        self.currentEdit = null;\n        this.onMenuControl();\n      });\n    },\n    // 监听剪切板\n    onPaste() {\n      this.$nextTick(() => {\n        setTimeout(() => {\n          let richText = document.querySelectorAll(\".clear-paste-style\");\n          richText.forEach((dom) => {\n            dom.addEventListener(\"paste\", this.optimizePasteEvent);\n          });\n        }, 0);\n      });\n    },\n    // 选择编辑\n    selectEdit(index) {\n      this.current = index;\n      this.currentEdit = index;\n      this.onMenuControl();\n      this.refresh();\n    },\n    // 监听编辑\n    onEdit(data, item) {\n      item.content = data;\n      this.refresh();\n      this.getRange();\n    },\n    deleteItem(index) {\n      this.editorData.splice(index, 1);\n      this.refresh();\n    },\n    downUp(index) {\n      if (index == 0) return;\n      let item = this.editorData.splice(index, 1);\n      this.editorData.splice(index - 1, 0, item[0]);\n      this.current = index - 1;\n      this.currentEdit = index - 1;\n      this.refresh();\n    },\n    downMove(index) {\n      if (index == this.editorData.length - 1) return;\n      let item = this.editorData.splice(index, 1)[0];\n      this.editorData.splice(index + 1, 0, item);\n      this.current = index + 1;\n      this.currentEdit = index + 1;\n      this.refresh();\n    },\n    refresh() {\n      this.$emit(\"change\", this.editorData);\n    },\n    // 监听输入状态\n    onCommandState(data) {\n      this.commandState = data;\n    },\n    fullscreen() {\n      this.isFullscreen = !this.isFullscreen;\n    },\n    // 获取光标位置\n    getRange() {\n      var supportRange = typeof document.createRange === \"function\";\n      let selection = document.getSelection(),\n        range;\n      if (supportRange) {\n        selection = document.getSelection();\n        if (selection.getRangeAt && selection.rangeCount) {\n          range = document.getSelection().getRangeAt(0);\n        }\n      } else {\n        range = document.selection.createRange();\n      }\n      this.range = range;\n    },\n    onMenuControl() {\n      $publish.emit(\"initOpenState\");\n    },\n    // 监听剪贴板 粘贴去除格式\n    optimizePasteEvent(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      let text = \"\";\n      const event = e.originalEvent || e;\n      // 获取 剪贴板 格式化后的内容\n      if (event.clipboardData && event.clipboardData.getData) {\n        text = event.clipboardData.getData(\"text/plain\");\n      } else if (window.clipboardData && window.clipboardData.getData) {\n        text = window.clipboardData.getData(\"Text\");\n      }\n      // 插入内容\n      if (document.queryCommandSupported(\"insertText\")) {\n        document.execCommand(\"insertHTML\", true, text);\n        return;\n      } else if (document.execCommand) {\n        document.execCommand(\"paste\", false, text);\n        return;\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.lay-editor {\n  height: 100%;\n}\n\n.lay-editor .layeditor-container {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n}\n\n.fullscreen {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  left: 0;\n  top: 0;\n  background: #f5f5f5;\n  z-index: 999;\n}\n\n.lay-editor .layeditor-tools {\n  padding: 10px 0;\n  background: #fff;\n  // border-bottom: 1px solid #eee;\n}\n.lay-editor .layeditor-tools .layeditor-item {\n  padding: 0 10px;\n  border-bottom: 1px solid #f5f5f5;\n}\n\n.lay-editor .editor-section {\n  flex: 1;\n  overflow: auto;\n  background: #fff;\n  background-image: linear-gradient(\n      90deg,\n      rgba(60, 10, 30, 0.04) 3%,\n      transparent 0\n    ),\n    linear-gradient(1turn, rgba(60, 10, 30, 0.04) 3%, transparent 0);\n  background-size: 20px 20px;\n  background-position: 50%;\n}\n\n.editor-section .layeditor-item {\n  border: 2px dotted transparent;\n  margin-top: 2px;\n  position: relative;\n}\n\n.editor-section .active {\n  border-color: #ccc;\n}\n\n.editor-section .layeditor-control {\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  background: #f5f5f5;\n  border: 2px dotted #ccc;\n  cursor: pointer;\n  display: flex;\n  // padding: 5px;\n}\n.editor-section .layeditor-control div {\n  width: 25px;\n  height: 25px;\n  margin-left: 10px;\n}\n.editor-section .layeditor-control img {\n  width: 100%;\n  height: 100%;\n}\n.editor-section .layeditor-control div:hover {\n  background: #fff;\n}\n\n/*滚动条样式*/\n#editor-section {\n  ::-webkit-scrollbar {\n    // width: 4px;\n    // height: 4px;\n  }\n  ::-webkit-scrollbar-thumb {\n    border-radius: 10px;\n    // background: rgb(224, 224, 224);\n  }\n  ::-webkit-scrollbar-track {\n    border-radius: 0;\n    // background: #eee;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}