{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../../addon/mode/overlay\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../../addon/mode/overlay\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"django:inner\", function () {\n    var keywords = [\"block\", \"endblock\", \"for\", \"endfor\", \"true\", \"false\", \"filter\", \"endfilter\", \"loop\", \"none\", \"self\", \"super\", \"if\", \"elif\", \"endif\", \"as\", \"else\", \"import\", \"with\", \"endwith\", \"without\", \"context\", \"ifequal\", \"endifequal\", \"ifnotequal\", \"endifnotequal\", \"extends\", \"include\", \"load\", \"comment\", \"endcomment\", \"empty\", \"url\", \"static\", \"trans\", \"blocktrans\", \"endblocktrans\", \"now\", \"regroup\", \"lorem\", \"ifchanged\", \"endifchanged\", \"firstof\", \"debug\", \"cycle\", \"csrf_token\", \"autoescape\", \"endautoescape\", \"spaceless\", \"endspaceless\", \"ssi\", \"templatetag\", \"verbatim\", \"endverbatim\", \"widthratio\"],\n      filters = [\"add\", \"addslashes\", \"capfirst\", \"center\", \"cut\", \"date\", \"default\", \"default_if_none\", \"dictsort\", \"dictsortreversed\", \"divisibleby\", \"escape\", \"escapejs\", \"filesizeformat\", \"first\", \"floatformat\", \"force_escape\", \"get_digit\", \"iriencode\", \"join\", \"last\", \"length\", \"length_is\", \"linebreaks\", \"linebreaksbr\", \"linenumbers\", \"ljust\", \"lower\", \"make_list\", \"phone2numeric\", \"pluralize\", \"pprint\", \"random\", \"removetags\", \"rjust\", \"safe\", \"safeseq\", \"slice\", \"slugify\", \"stringformat\", \"striptags\", \"time\", \"timesince\", \"timeuntil\", \"title\", \"truncatechars\", \"truncatechars_html\", \"truncatewords\", \"truncatewords_html\", \"unordered_list\", \"upper\", \"urlencode\", \"urlize\", \"urlizetrunc\", \"wordcount\", \"wordwrap\", \"yesno\"],\n      operators = [\"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"],\n      wordOperators = [\"in\", \"not\", \"or\", \"and\"];\n    keywords = new RegExp(\"^\\\\b(\" + keywords.join(\"|\") + \")\\\\b\");\n    filters = new RegExp(\"^\\\\b(\" + filters.join(\"|\") + \")\\\\b\");\n    operators = new RegExp(\"^\\\\b(\" + operators.join(\"|\") + \")\\\\b\");\n    wordOperators = new RegExp(\"^\\\\b(\" + wordOperators.join(\"|\") + \")\\\\b\");\n\n    // We have to return \"null\" instead of null, in order to avoid string\n    // styling as the default, when using Django templates inside HTML\n    // element attributes\n    function tokenBase(stream, state) {\n      // Attempt to identify a variable, template or comment tag respectively\n      if (stream.match(\"{{\")) {\n        state.tokenize = inVariable;\n        return \"tag\";\n      } else if (stream.match(\"{%\")) {\n        state.tokenize = inTag;\n        return \"tag\";\n      } else if (stream.match(\"{#\")) {\n        state.tokenize = inComment;\n        return \"comment\";\n      }\n\n      // Ignore completely any stream series that do not match the\n      // Django template opening tags.\n      while (stream.next() != null && !stream.match(/\\{[{%#]/, false)) {}\n      return null;\n    }\n\n    // A string can be included in either single or double quotes (this is\n    // the delimiter). Mark everything as a string until the start delimiter\n    // occurs again.\n    function inString(delimiter, previousTokenizer) {\n      return function (stream, state) {\n        if (!state.escapeNext && stream.eat(delimiter)) {\n          state.tokenize = previousTokenizer;\n        } else {\n          if (state.escapeNext) {\n            state.escapeNext = false;\n          }\n          var ch = stream.next();\n\n          // Take into account the backslash for escaping characters, such as\n          // the string delimiter.\n          if (ch == \"\\\\\") {\n            state.escapeNext = true;\n          }\n        }\n        return \"string\";\n      };\n    }\n\n    // Apply Django template variable syntax highlighting\n    function inVariable(stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n        if (stream.peek() != \".\") {\n          return \"null\";\n        }\n\n        // Dot followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for property.\");\n        }\n      }\n\n      // Attempt to match a pipe that precedes a filter\n      if (state.waitPipe) {\n        state.waitPipe = false;\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        }\n\n        // Pipe followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for filter.\");\n        }\n      }\n\n      // Highlight properties\n      if (state.waitProperty) {\n        state.waitProperty = false;\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true; // A property can be followed by another property\n          state.waitPipe = true; // A property can be followed by a filter\n          return \"property\";\n        }\n      }\n\n      // Highlight filters\n      if (state.waitFilter) {\n        state.waitFilter = false;\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      }\n\n      // Ignore all white spaces\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      }\n\n      // Identify numbers\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      }\n\n      // Identify strings\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      }\n\n      // Attempt to find the variable\n      if (stream.match(/\\b(\\w+)\\b/) && !state.foundVariable) {\n        state.waitDot = true;\n        state.waitPipe = true; // A property can be followed by a filter\n        return \"variable\";\n      }\n\n      // If found closing tag reset\n      if (stream.match(\"}}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null;\n        state.tokenize = tokenBase;\n        return \"tag\";\n      }\n\n      // If nothing was found, advance to the next character\n      stream.next();\n      return \"null\";\n    }\n    function inTag(stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n        if (stream.peek() != \".\") {\n          return \"null\";\n        }\n\n        // Dot followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for property.\");\n        }\n      }\n\n      // Attempt to match a pipe that precedes a filter\n      if (state.waitPipe) {\n        state.waitPipe = false;\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        }\n\n        // Pipe followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error(\"Unexpected error while waiting for filter.\");\n        }\n      }\n\n      // Highlight properties\n      if (state.waitProperty) {\n        state.waitProperty = false;\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true; // A property can be followed by another property\n          state.waitPipe = true; // A property can be followed by a filter\n          return \"property\";\n        }\n      }\n\n      // Highlight filters\n      if (state.waitFilter) {\n        state.waitFilter = false;\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      }\n\n      // Ignore all white spaces\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      }\n\n      // Identify numbers\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      }\n\n      // Identify strings\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      }\n\n      // Attempt to match an operator\n      if (stream.match(operators)) {\n        return \"operator\";\n      }\n\n      // Attempt to match a word operator\n      if (stream.match(wordOperators)) {\n        return \"keyword\";\n      }\n\n      // Attempt to match a keyword\n      var keywordMatch = stream.match(keywords);\n      if (keywordMatch) {\n        if (keywordMatch[0] == \"comment\") {\n          state.blockCommentTag = true;\n        }\n        return \"keyword\";\n      }\n\n      // Attempt to match a variable\n      if (stream.match(/\\b(\\w+)\\b/)) {\n        state.waitDot = true;\n        state.waitPipe = true; // A property can be followed by a filter\n        return \"variable\";\n      }\n\n      // If found closing tag reset\n      if (stream.match(\"%}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null;\n        // If the tag that closes is a block comment tag, we want to mark the\n        // following code as comment, until the tag closes.\n        if (state.blockCommentTag) {\n          state.blockCommentTag = false; // Release the \"lock\"\n          state.tokenize = inBlockComment;\n        } else {\n          state.tokenize = tokenBase;\n        }\n        return \"tag\";\n      }\n\n      // If nothing was found, advance to the next character\n      stream.next();\n      return \"null\";\n    }\n\n    // Mark everything as comment inside the tag and the tag itself.\n    function inComment(stream, state) {\n      if (stream.match(/^.*?#\\}/)) state.tokenize = tokenBase;else stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Mark everything as a comment until the `blockcomment` tag closes.\n    function inBlockComment(stream, state) {\n      if (stream.match(/\\{%\\s*endcomment\\s*%\\}/, false)) {\n        state.tokenize = inTag;\n        stream.match(\"{%\");\n        return \"tag\";\n      } else {\n        stream.next();\n        return \"comment\";\n      }\n    }\n    return {\n      startState: function () {\n        return {\n          tokenize: tokenBase\n        };\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{% comment %}\",\n      blockCommentEnd: \"{% endcomment %}\"\n    };\n  });\n  CodeMirror.defineMode(\"django\", function (config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var djangoInner = CodeMirror.getMode(config, \"django:inner\");\n    return CodeMirror.overlayMode(htmlBase, djangoInner);\n  });\n  CodeMirror.defineMIME(\"text/x-django\", \"django\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","keywords","filters","operators","wordOperators","RegExp","join","tokenBase","stream","state","match","tokenize","inVariable","inTag","inComment","next","inString","delimiter","previousTokenizer","escapeNext","eat","ch","waitDot","peek","waitProperty","Error","waitPipe","waitFilter","eatSpace","foundVariable","keywordMatch","blockCommentTag","inBlockComment","skipToEnd","startState","token","blockCommentStart","blockCommentEnd","config","htmlBase","getMode","djangoInner","overlayMode","defineMIME"],"sources":["D:/Java_Projects/MYBLOG/frontend/blog-frontend/node_modules/codemirror/mode/django/django.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"),\n        require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\",\n            \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"django:inner\", function() {\n    var keywords = [\"block\", \"endblock\", \"for\", \"endfor\", \"true\", \"false\", \"filter\", \"endfilter\",\n                    \"loop\", \"none\", \"self\", \"super\", \"if\", \"elif\", \"endif\", \"as\", \"else\", \"import\",\n                    \"with\", \"endwith\", \"without\", \"context\", \"ifequal\", \"endifequal\", \"ifnotequal\",\n                    \"endifnotequal\", \"extends\", \"include\", \"load\", \"comment\", \"endcomment\",\n                    \"empty\", \"url\", \"static\", \"trans\", \"blocktrans\", \"endblocktrans\", \"now\",\n                    \"regroup\", \"lorem\", \"ifchanged\", \"endifchanged\", \"firstof\", \"debug\", \"cycle\",\n                    \"csrf_token\", \"autoescape\", \"endautoescape\", \"spaceless\", \"endspaceless\",\n                    \"ssi\", \"templatetag\", \"verbatim\", \"endverbatim\", \"widthratio\"],\n        filters = [\"add\", \"addslashes\", \"capfirst\", \"center\", \"cut\", \"date\",\n                   \"default\", \"default_if_none\", \"dictsort\",\n                   \"dictsortreversed\", \"divisibleby\", \"escape\", \"escapejs\",\n                   \"filesizeformat\", \"first\", \"floatformat\", \"force_escape\",\n                   \"get_digit\", \"iriencode\", \"join\", \"last\", \"length\",\n                   \"length_is\", \"linebreaks\", \"linebreaksbr\", \"linenumbers\",\n                   \"ljust\", \"lower\", \"make_list\", \"phone2numeric\", \"pluralize\",\n                   \"pprint\", \"random\", \"removetags\", \"rjust\", \"safe\",\n                   \"safeseq\", \"slice\", \"slugify\", \"stringformat\", \"striptags\",\n                   \"time\", \"timesince\", \"timeuntil\", \"title\", \"truncatechars\",\n                   \"truncatechars_html\", \"truncatewords\", \"truncatewords_html\",\n                   \"unordered_list\", \"upper\", \"urlencode\", \"urlize\",\n                   \"urlizetrunc\", \"wordcount\", \"wordwrap\", \"yesno\"],\n        operators = [\"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"],\n        wordOperators = [\"in\", \"not\", \"or\", \"and\"];\n\n    keywords = new RegExp(\"^\\\\b(\" + keywords.join(\"|\") + \")\\\\b\");\n    filters = new RegExp(\"^\\\\b(\" + filters.join(\"|\") + \")\\\\b\");\n    operators = new RegExp(\"^\\\\b(\" + operators.join(\"|\") + \")\\\\b\");\n    wordOperators = new RegExp(\"^\\\\b(\" + wordOperators.join(\"|\") + \")\\\\b\");\n\n    // We have to return \"null\" instead of null, in order to avoid string\n    // styling as the default, when using Django templates inside HTML\n    // element attributes\n    function tokenBase (stream, state) {\n      // Attempt to identify a variable, template or comment tag respectively\n      if (stream.match(\"{{\")) {\n        state.tokenize = inVariable;\n        return \"tag\";\n      } else if (stream.match(\"{%\")) {\n        state.tokenize = inTag;\n        return \"tag\";\n      } else if (stream.match(\"{#\")) {\n        state.tokenize = inComment;\n        return \"comment\";\n      }\n\n      // Ignore completely any stream series that do not match the\n      // Django template opening tags.\n      while (stream.next() != null && !stream.match(/\\{[{%#]/, false)) {}\n      return null;\n    }\n\n    // A string can be included in either single or double quotes (this is\n    // the delimiter). Mark everything as a string until the start delimiter\n    // occurs again.\n    function inString (delimiter, previousTokenizer) {\n      return function (stream, state) {\n        if (!state.escapeNext && stream.eat(delimiter)) {\n          state.tokenize = previousTokenizer;\n        } else {\n          if (state.escapeNext) {\n            state.escapeNext = false;\n          }\n\n          var ch = stream.next();\n\n          // Take into account the backslash for escaping characters, such as\n          // the string delimiter.\n          if (ch == \"\\\\\") {\n            state.escapeNext = true;\n          }\n        }\n\n        return \"string\";\n      };\n    }\n\n    // Apply Django template variable syntax highlighting\n    function inVariable (stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n\n        if (stream.peek() != \".\") {\n          return \"null\";\n        }\n\n        // Dot followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for property.\");\n        }\n      }\n\n      // Attempt to match a pipe that precedes a filter\n      if (state.waitPipe) {\n        state.waitPipe = false;\n\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        }\n\n        // Pipe followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for filter.\");\n        }\n      }\n\n      // Highlight properties\n      if (state.waitProperty) {\n        state.waitProperty = false;\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true;  // A property can be followed by another property\n          state.waitPipe = true;  // A property can be followed by a filter\n          return \"property\";\n        }\n      }\n\n      // Highlight filters\n      if (state.waitFilter) {\n          state.waitFilter = false;\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      }\n\n      // Ignore all white spaces\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      }\n\n      // Identify numbers\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      }\n\n      // Identify strings\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      }\n\n      // Attempt to find the variable\n      if (stream.match(/\\b(\\w+)\\b/) && !state.foundVariable) {\n        state.waitDot = true;\n        state.waitPipe = true;  // A property can be followed by a filter\n        return \"variable\";\n      }\n\n      // If found closing tag reset\n      if (stream.match(\"}}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null;\n        state.tokenize = tokenBase;\n        return \"tag\";\n      }\n\n      // If nothing was found, advance to the next character\n      stream.next();\n      return \"null\";\n    }\n\n    function inTag (stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n\n        if (stream.peek() != \".\") {\n          return \"null\";\n        }\n\n        // Dot followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for property.\");\n        }\n      }\n\n      // Attempt to match a pipe that precedes a filter\n      if (state.waitPipe) {\n        state.waitPipe = false;\n\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        }\n\n        // Pipe followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for filter.\");\n        }\n      }\n\n      // Highlight properties\n      if (state.waitProperty) {\n        state.waitProperty = false;\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true;  // A property can be followed by another property\n          state.waitPipe = true;  // A property can be followed by a filter\n          return \"property\";\n        }\n      }\n\n      // Highlight filters\n      if (state.waitFilter) {\n          state.waitFilter = false;\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      }\n\n      // Ignore all white spaces\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      }\n\n      // Identify numbers\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      }\n\n      // Identify strings\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      }\n\n      // Attempt to match an operator\n      if (stream.match(operators)) {\n        return \"operator\";\n      }\n\n      // Attempt to match a word operator\n      if (stream.match(wordOperators)) {\n        return \"keyword\";\n      }\n\n      // Attempt to match a keyword\n      var keywordMatch = stream.match(keywords);\n      if (keywordMatch) {\n        if (keywordMatch[0] == \"comment\") {\n          state.blockCommentTag = true;\n        }\n        return \"keyword\";\n      }\n\n      // Attempt to match a variable\n      if (stream.match(/\\b(\\w+)\\b/)) {\n        state.waitDot = true;\n        state.waitPipe = true;  // A property can be followed by a filter\n        return \"variable\";\n      }\n\n      // If found closing tag reset\n      if (stream.match(\"%}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null;\n        // If the tag that closes is a block comment tag, we want to mark the\n        // following code as comment, until the tag closes.\n        if (state.blockCommentTag) {\n          state.blockCommentTag = false;  // Release the \"lock\"\n          state.tokenize = inBlockComment;\n        } else {\n          state.tokenize = tokenBase;\n        }\n        return \"tag\";\n      }\n\n      // If nothing was found, advance to the next character\n      stream.next();\n      return \"null\";\n    }\n\n    // Mark everything as comment inside the tag and the tag itself.\n    function inComment (stream, state) {\n      if (stream.match(/^.*?#\\}/)) state.tokenize = tokenBase\n      else stream.skipToEnd()\n      return \"comment\";\n    }\n\n    // Mark everything as a comment until the `blockcomment` tag closes.\n    function inBlockComment (stream, state) {\n      if (stream.match(/\\{%\\s*endcomment\\s*%\\}/, false)) {\n        state.tokenize = inTag;\n        stream.match(\"{%\");\n        return \"tag\";\n      } else {\n        stream.next();\n        return \"comment\";\n      }\n    }\n\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{% comment %}\",\n      blockCommentEnd: \"{% endcomment %}\"\n    };\n  });\n\n  CodeMirror.defineMode(\"django\", function(config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var djangoInner = CodeMirror.getMode(config, \"django:inner\");\n    return CodeMirror.overlayMode(htmlBase, djangoInner);\n  });\n\n  CodeMirror.defineMIME(\"text/x-django\", \"django\");\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}