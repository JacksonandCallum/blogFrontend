{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nVue.use(VueRouter);\n\n// 解决导航栏或者底部导航tabBar中的vue-router在3.0版本以上频繁点击菜单报错的问题。\nconst originalPush = VueRouter.prototype.push;\nVueRouter.prototype.push = function push(location) {\n  return originalPush.call(this, location).catch(err => err);\n};\nconst routes = [{\n  path: '/',\n  redirect: '/front/home'\n}, {\n  path: '/front',\n  name: 'Front',\n  component: () => import('../views/Front.vue'),\n  redirect: '/front/home',\n  children: [{\n    path: 'home',\n    name: 'FHome',\n    meta: {\n      name: '系统首页'\n    },\n    component: () => import('../views/front/Home')\n  }, {\n    path: 'person',\n    name: 'Person',\n    meta: {\n      name: '个人信息'\n    },\n    component: () => import('../views/front/Person')\n  }, {\n    path: 'blogDetail',\n    name: 'BlogDetail',\n    meta: {\n      name: '博客详情'\n    },\n    component: () => import('../views/front/BlogDetail')\n  }, {\n    path: 'activityCenter',\n    name: 'ActivityCenter',\n    meta: {\n      name: '活动中心'\n    },\n    component: () => import('../views/front/ActivityCenter')\n  }, {\n    path: 'activityDetail',\n    name: 'ActivityDetail',\n    meta: {\n      name: '活动详情'\n    },\n    component: () => import('../views/front/ActivityDetail')\n  }, {\n    path: 'newBlog',\n    name: 'newBlog',\n    meta: {\n      name: '新建博客'\n    },\n    component: () => import('../views/front/newBlog.vue')\n  }, {\n    path: 'blogSort',\n    name: 'BlogSort',\n    meta: {\n      name: '博客分类'\n    },\n    component: () => import('../views/front/BlogSort.vue')\n  }, {\n    path: 'about',\n    name: 'About',\n    meta: {\n      name: '关于'\n    },\n    component: () => import('../views/front/About.vue')\n  }]\n}, {\n  path: '/manager',\n  name: 'Manager',\n  component: () => import('../views/Manager.vue'),\n  redirect: '/manager/home',\n  // 重定向到后台主页\n  children: [{\n    path: '403',\n    name: 'NoAuth',\n    meta: {\n      name: '无权限'\n    },\n    component: () => import('../views/manager/403')\n  }, {\n    path: 'home',\n    name: 'Home',\n    meta: {\n      name: '系统首页'\n    },\n    component: () => import('../views/manager/Home')\n  }, {\n    path: 'admin',\n    name: 'Admin',\n    meta: {\n      name: '管理员信息'\n    },\n    component: () => import('../views/manager/Admin')\n  }, {\n    path: 'adminPerson',\n    name: 'AdminPerson',\n    meta: {\n      name: '个人信息'\n    },\n    component: () => import('../views/manager/AdminPerson')\n  }, {\n    path: 'password',\n    name: 'Password',\n    meta: {\n      name: '修改密码'\n    },\n    component: () => import('../views/manager/Password')\n  }, {\n    path: 'notice',\n    name: 'Notice',\n    meta: {\n      name: '公告信息'\n    },\n    component: () => import('../views/manager/Notice')\n  }, {\n    path: 'user',\n    name: 'User',\n    meta: {\n      name: '用户信息'\n    },\n    component: () => import('../views/manager/User.vue')\n  }, {\n    path: 'category',\n    name: 'Category',\n    meta: {\n      name: '博客分类'\n    },\n    component: () => import('../views/manager/Category.vue')\n  }, {\n    path: 'blog',\n    name: 'Blog',\n    meta: {\n      name: '博客信息'\n    },\n    component: () => import('../views/manager/Blog.vue')\n  }, {\n    path: 'blogDemo',\n    name: 'BlogDemo',\n    meta: {\n      name: '博客Demo'\n    },\n    component: () => import('../views/manager/BlogDemo.vue')\n  }, {\n    path: 'activity',\n    name: 'Activity',\n    meta: {\n      name: '活动信息'\n    },\n    component: () => import('../views/manager/Activity.vue')\n  }, {\n    path: 'activitySign',\n    name: 'ActivitySign',\n    meta: {\n      name: '活动报名'\n    },\n    component: () => import('../views/manager/ActivitySign.vue')\n  }, {\n    path: 'comment',\n    name: 'Comment',\n    meta: {\n      name: '评论信息'\n    },\n    component: () => import('../views/manager/Comment.vue')\n  }]\n}, {\n  path: '/login',\n  name: 'Login',\n  meta: {\n    name: '登录'\n  },\n  component: () => import('../views/Login.vue')\n}, {\n  path: '/register',\n  name: 'Register',\n  meta: {\n    name: '注册'\n  },\n  component: () => import('../views/Register.vue')\n}, {\n  path: '*',\n  name: 'NotFound',\n  meta: {\n    name: '无法访问'\n  },\n  component: () => import('../views/404.vue')\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\n\n// router.onError((error) => {\n//   const pattern = /Loading chunk (\\d)+ failed/g;\n//   const isChunkLoadFailed = error.message.match(pattern);\n//   const targetPath = router.history.pending.fullPath;\n//   if (isChunkLoadFailed) {\n//     // 用路由的replace方法，并没有相当于F5刷新页面，失败的js文件并没有从新请求，会导致一直尝试replace页面导致死循环，而用 location.reload 方法，相当于触发F5刷新页面，虽然用户体验上来说会有刷新加载察觉，但不会导致页面卡死及死循环，从而曲线救国解决该问题\n//     location.reload();\n//     router.replace(targetPath);\n//   }\n// });\n\n/* 正则使用'\\S'而不是'\\d' 为了适配写魔法注释的朋友，写'\\d'遇到魔法注释就匹配不成功了。\r\n * 使用reload方法而不是replace原因是replace还是去请求之前的js文件，会导致循环报错。\r\n * reload会刷新页面， 请求最新的index.html以及最新的js路径。\r\n * 直接修改location.href或使用location.assign或location.replace，和router.replace同理， \r\n * 在当前场景中请求的依然是原来的js文件，区别仅有浏览器的历史栈。因此必须采用reload.\r\n * reload()有个特点是当你在A页面试图进入B页面的时候报错，会在A页面刷新，因此在刷新后需要手动书写逻辑\r\n * 进入B页面，可以在router.onReady()方法里面书写\r\n * 为了避免在特殊情况下服务器丢失资源导致无限报错刷新，做了一步控制，仅尝试一次进入B页面，\r\n * 如果不成功就只刷新A页面，停留在当前的A页面。\r\n */\n\nrouter.onError(error => {\n  const jsPattern = /Loading chunk (\\S)+ failed/g;\n  const cssPattern = /Loading CSS chunk (\\S)+ failed/g;\n  const isChunkLoadFailed = error.message.match(jsPattern || cssPattern);\n  const targetPath = router.history.pending.fullPath;\n  if (isChunkLoadFailed) {\n    localStorage.setItem('targetPath', targetPath);\n    window.location.reload();\n  }\n});\nrouter.onReady(() => {\n  const targetPath = localStorage.getItem('targetPath');\n  const tryReload = localStorage.getItem('tryReload');\n  if (targetPath) {\n    localStorage.removeItem('targetPath');\n    if (!tryReload) {\n      router.replace(targetPath);\n      localStorage.setItem('tryReload', true);\n    } else {\n      localStorage.removeItem('tryReload');\n    }\n  }\n});\n\n// 注：不需要前台的项目，可以注释掉该路由守卫\n// 路由守卫\nrouter.beforeEach((to, from, next) => {\n  let user = JSON.parse(localStorage.getItem(\"ADMIN\") || localStorage.getItem(\"USER\") || '{}');\n  console.log('当前路由:', to.path);\n  console.log('用户角色:', user.role);\n  if (to.path === '/') {\n    if (user.role) {\n      if (user.role === 'ADMIN') {\n        next('/manager/home');\n      } else {\n        next('/login');\n      }\n    } else {\n      next('/front/home');\n    }\n  } else {\n    next();\n  }\n  // let user = JSON.parse(localStorage.getItem(\"ADMIN\") || '{}');\n  // if (!user.role) {\n  //   next('/front/home'); // 如果用户没有角色信息，重定向到'/front/home'\n  // } else if (user.role === 'ADMIN') {\n  //   next('/manager/home'); // 如果用户是管理员，重定向到'/manager/home'\n  // } else {\n  //   next(); // 其他情况不进行重定向\n  // }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","use","originalPush","prototype","push","location","call","catch","err","routes","path","redirect","name","component","children","meta","router","mode","base","process","env","BASE_URL","onError","error","jsPattern","cssPattern","isChunkLoadFailed","message","match","targetPath","history","pending","fullPath","localStorage","setItem","window","reload","onReady","getItem","tryReload","removeItem","replace","beforeEach","to","from","next","user","JSON","parse","console","log","role"],"sources":["D:/Java_Projects/MYBLOG/frontend/blog-frontend/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport VueRouter from 'vue-router'\r\n\r\nVue.use(VueRouter)\r\n\r\n// 解决导航栏或者底部导航tabBar中的vue-router在3.0版本以上频繁点击菜单报错的问题。\r\nconst originalPush = VueRouter.prototype.push\r\nVueRouter.prototype.push = function push(location) {\r\n  return originalPush.call(this, location).catch(err => err)\r\n}\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    redirect: '/front/home'\r\n  },\r\n\r\n  {\r\n    path: '/front',\r\n    name: 'Front',\r\n    component: () => import('../views/Front.vue'),\r\n    redirect: '/front/home',\r\n    children: [\r\n      { path: 'home', name: 'FHome', meta: { name: '系统首页' }, component: () => import('../views/front/Home') },\r\n      { path: 'person', name: 'Person', meta: { name: '个人信息' }, component: () => import('../views/front/Person') },\r\n      { path: 'blogDetail', name: 'BlogDetail', meta: { name: '博客详情' }, component: () => import('../views/front/BlogDetail') },\r\n      { path: 'activityCenter', name: 'ActivityCenter', meta: { name: '活动中心' }, component: () => import('../views/front/ActivityCenter') },\r\n      { path: 'activityDetail', name: 'ActivityDetail', meta: { name: '活动详情' }, component: () => import('../views/front/ActivityDetail') },\r\n      { path: 'newBlog', name: 'newBlog', meta: { name: '新建博客' }, component: () => import('../views/front/newBlog.vue') },\r\n      { path: 'blogSort', name: 'BlogSort', meta: { name: '博客分类' }, component: () => import('../views/front/BlogSort.vue') },\r\n      { path: 'about', name: 'About', meta: { name: '关于' }, component: () => import('../views/front/About.vue') },\r\n    ]\r\n  },\r\n\r\n\r\n  {\r\n    path: '/manager',\r\n    name: 'Manager',\r\n    component: () => import('../views/Manager.vue'),\r\n    redirect: '/manager/home',  // 重定向到后台主页\r\n    children: [\r\n      { path: '403', name: 'NoAuth', meta: { name: '无权限' }, component: () => import('../views/manager/403') },\r\n      { path: 'home', name: 'Home', meta: { name: '系统首页' }, component: () => import('../views/manager/Home') },\r\n      { path: 'admin', name: 'Admin', meta: { name: '管理员信息' }, component: () => import('../views/manager/Admin') },\r\n      { path: 'adminPerson', name: 'AdminPerson', meta: { name: '个人信息' }, component: () => import('../views/manager/AdminPerson') },\r\n      { path: 'password', name: 'Password', meta: { name: '修改密码' }, component: () => import('../views/manager/Password') },\r\n      { path: 'notice', name: 'Notice', meta: { name: '公告信息' }, component: () => import('../views/manager/Notice') },\r\n      { path: 'user', name: 'User', meta: { name: '用户信息' }, component: () => import('../views/manager/User.vue') },\r\n      { path: 'category', name: 'Category', meta: { name: '博客分类' }, component: () => import('../views/manager/Category.vue') },\r\n      { path: 'blog', name: 'Blog', meta: { name: '博客信息' }, component: () => import('../views/manager/Blog.vue') },\r\n      { path: 'blogDemo', name: 'BlogDemo', meta: { name: '博客Demo' }, component: () => import('../views/manager/BlogDemo.vue') },\r\n      { path: 'activity', name: 'Activity', meta: { name: '活动信息' }, component: () => import('../views/manager/Activity.vue') },\r\n      { path: 'activitySign', name: 'ActivitySign', meta: { name: '活动报名' }, component: () => import('../views/manager/ActivitySign.vue') },\r\n      { path: 'comment', name: 'Comment', meta: { name: '评论信息' }, component: () => import('../views/manager/Comment.vue') },\r\n    ]\r\n  },\r\n\r\n\r\n  { path: '/login', name: 'Login', meta: { name: '登录' }, component: () => import('../views/Login.vue') },\r\n  { path: '/register', name: 'Register', meta: { name: '注册' }, component: () => import('../views/Register.vue') },\r\n  { path: '*', name: 'NotFound', meta: { name: '无法访问' }, component: () => import('../views/404.vue') },\r\n\r\n]\r\n\r\nconst router = new VueRouter({\r\n  mode: 'history',\r\n  base: process.env.BASE_URL,\r\n  routes\r\n})\r\n\r\n\r\n// router.onError((error) => {\r\n//   const pattern = /Loading chunk (\\d)+ failed/g;\r\n//   const isChunkLoadFailed = error.message.match(pattern);\r\n//   const targetPath = router.history.pending.fullPath;\r\n//   if (isChunkLoadFailed) {\r\n//     // 用路由的replace方法，并没有相当于F5刷新页面，失败的js文件并没有从新请求，会导致一直尝试replace页面导致死循环，而用 location.reload 方法，相当于触发F5刷新页面，虽然用户体验上来说会有刷新加载察觉，但不会导致页面卡死及死循环，从而曲线救国解决该问题\r\n//     location.reload();\r\n//     router.replace(targetPath);\r\n//   }\r\n// });\r\n\r\n/* 正则使用'\\S'而不是'\\d' 为了适配写魔法注释的朋友，写'\\d'遇到魔法注释就匹配不成功了。\r\n * 使用reload方法而不是replace原因是replace还是去请求之前的js文件，会导致循环报错。\r\n * reload会刷新页面， 请求最新的index.html以及最新的js路径。\r\n * 直接修改location.href或使用location.assign或location.replace，和router.replace同理， \r\n * 在当前场景中请求的依然是原来的js文件，区别仅有浏览器的历史栈。因此必须采用reload.\r\n * reload()有个特点是当你在A页面试图进入B页面的时候报错，会在A页面刷新，因此在刷新后需要手动书写逻辑\r\n * 进入B页面，可以在router.onReady()方法里面书写\r\n * 为了避免在特殊情况下服务器丢失资源导致无限报错刷新，做了一步控制，仅尝试一次进入B页面，\r\n * 如果不成功就只刷新A页面，停留在当前的A页面。\r\n */\r\n\r\n\r\nrouter.onError((error) => {\r\n  const jsPattern = /Loading chunk (\\S)+ failed/g\r\n  const cssPattern = /Loading CSS chunk (\\S)+ failed/g\r\n  const isChunkLoadFailed = error.message.match(jsPattern || cssPattern)\r\n  const targetPath = router.history.pending.fullPath\r\n  if (isChunkLoadFailed) {\r\n    localStorage.setItem('targetPath', targetPath)\r\n    window.location.reload()\r\n  }\r\n})\r\n\r\nrouter.onReady(() => {\r\n  const targetPath = localStorage.getItem('targetPath')\r\n  const tryReload = localStorage.getItem('tryReload')\r\n  if (targetPath) {\r\n    localStorage.removeItem('targetPath')\r\n    if (!tryReload) {\r\n      router.replace(targetPath)\r\n      localStorage.setItem('tryReload', true)\r\n    } else {\r\n      localStorage.removeItem('tryReload')\r\n    }\r\n  }\r\n})\r\n\r\n\r\n\r\n\r\n\r\n// 注：不需要前台的项目，可以注释掉该路由守卫\r\n// 路由守卫\r\nrouter.beforeEach((to, from, next) => {\r\n  let user = JSON.parse(localStorage.getItem(\"ADMIN\") || localStorage.getItem(\"USER\") || '{}');\r\n  console.log('当前路由:', to.path);\r\n  console.log('用户角色:', user.role);\r\n  if (to.path === '/') {\r\n    if (user.role) {\r\n      if (user.role === 'ADMIN') {\r\n        next('/manager/home')\r\n      } else {\r\n        next('/login')\r\n      }\r\n    } else {\r\n      next('/front/home')\r\n    }\r\n  } else {\r\n    next()\r\n  }\r\n  // let user = JSON.parse(localStorage.getItem(\"ADMIN\") || '{}');\r\n  // if (!user.role) {\r\n  //   next('/front/home'); // 如果用户没有角色信息，重定向到'/front/home'\r\n  // } else if (user.role === 'ADMIN') {\r\n  //   next('/manager/home'); // 如果用户是管理员，重定向到'/manager/home'\r\n  // } else {\r\n  //   next(); // 其他情况不进行重定向\r\n  // }\r\n})\r\n\r\nexport default router\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}