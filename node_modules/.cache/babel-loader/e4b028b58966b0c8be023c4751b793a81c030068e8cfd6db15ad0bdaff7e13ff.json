{"ast":null,"code":"const twoPoem = () => import(\"@/components/twoPoem.vue\");\nconst proTag = () => import(\"@/components/proTag\");\nconst articleList = () => import(\"@/components/articleList\");\nconst myFooter = () => import(\"@/components/myFooter.vue\");\nexport default {\n  components: {\n    twoPoem,\n    proTag,\n    articleList,\n    myFooter\n  },\n  data() {\n    return {\n      sortId: this.$route.query.sortId,\n      articles: []\n    };\n  },\n  computed: {\n    uniqueTags() {\n      const allTags = this.articles.flatMap(article => article.tags);\n      return [...new Set(allTags)];\n    }\n  },\n  watch: {\n    $route() {\n      this.articles.splice(0, this.articles.length);\n      this.sortId = this.$route.query.sortId;\n      this.getArticles();\n    }\n  },\n  created() {\n    this.getArticles();\n  },\n  mounted() {},\n  methods: {\n    getArticles() {\n      this.$request.get(\"/blog/selectCategoryID/\" + this.sortId).then(res => {\n        this.articles = res.data.map(article => {\n          // 处理每篇文章的标签\n          article.tags = this.processTags(article.tags);\n          return article;\n        });\n      });\n    },\n    // 处理标签，去除字符串数组的符号\n    processTags(tagsString) {\n      // 去除字符串两端的中括号和双引号，并以空格分割为数组，然后去重\n      return [...new Set(tagsString.replace(/[\\[\\]\"]/g, \"\").splice(\",\"))];\n    }\n  }\n};","map":{"version":3,"names":["twoPoem","proTag","articleList","myFooter","components","data","sortId","$route","query","articles","computed","uniqueTags","allTags","flatMap","article","tags","Set","watch","splice","length","getArticles","created","mounted","methods","$request","get","then","res","map","processTags","tagsString","replace"],"sources":["src/views/front/BlogSort.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- 两句诗 -->\r\n        <div class=\"my-animation-slide-top\">\r\n            <twoPoem></twoPoem>\r\n        </div>\r\n\r\n        <div style=\"background: white; padding-top: 40px\" class=\"my-animation-slide-bottom\">\r\n            <!-- 标签 -->\r\n            <div class=\"sort-warp shadow-box\" v-if=\"!$common.isEmpty(articles)\">\r\n                <div v-for=\"(tag, index) in uniqueTags\" :key=\"index\" :class=\"{\r\n                    isActive: !!tag,\r\n                }\">\r\n                    <proTag :info=\"processTags(article.tags)\"\r\n                        :color=\"$constant.before_color_list[Math.floor(Math.random() * 6)]\" style=\"margin: 12px\">\r\n                    </proTag>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- 文章 -->\r\n            <div class=\"article-wrap\">\r\n                <articleList :articleList=\"articles\"></articleList>\r\n                <div class=\"pagination-wrap\">\r\n                    <div style=\"user-select: none\">~~到底啦~~</div>\r\n                </div>\r\n            </div>\r\n            <!-- 页脚 -->\r\n            <myFooter></myFooter>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nconst twoPoem = () => import(\"@/components/twoPoem.vue\");\r\nconst proTag = () => import(\"@/components/proTag\");\r\nconst articleList = () => import(\"@/components/articleList\");\r\nconst myFooter = () => import(\"@/components/myFooter.vue\");\r\n\r\nexport default {\r\n    components: {\r\n        twoPoem,\r\n        proTag,\r\n        articleList,\r\n        myFooter,\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            sortId: this.$route.query.sortId,\r\n            articles: [],\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        uniqueTags() {\r\n            const allTags = this.articles.flatMap((article) => article.tags);\r\n            return [...new Set(allTags)];\r\n        },\r\n    },\r\n\r\n    watch: {\r\n        $route() {\r\n            this.articles.splice(0, this.articles.length);\r\n            this.sortId = this.$route.query.sortId;\r\n            this.getArticles();\r\n        },\r\n    },\r\n\r\n    created() {\r\n        this.getArticles();\r\n    },\r\n\r\n    mounted() { },\r\n\r\n    methods: {\r\n        getArticles() {\r\n            this.$request.get(\"/blog/selectCategoryID/\" + this.sortId).then((res) => {\r\n                this.articles = res.data.map((article) => {\r\n                    // 处理每篇文章的标签\r\n                    article.tags = this.processTags(article.tags);\r\n                    return article;\r\n                });\r\n            });\r\n        },\r\n        // 处理标签，去除字符串数组的符号\r\n        processTags(tagsString) {\r\n            // 去除字符串两端的中括号和双引号，并以空格分割为数组，然后去重\r\n            return [...new Set(tagsString.replace(/[\\[\\]\"]/g, \"\").splice(\",\"))];\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 以my-animation-开头的class */\r\n[class*=\"my-animation-\"] {\r\n    animation-duration: 1s;\r\n    animation-timing-function: ease-out;\r\n    animation-fill-mode: both;\r\n}\r\n\r\n.my-animation-slide-top {\r\n    animation-name: slide-top;\r\n}\r\n\r\n.my-animation-slide-bottom {\r\n    animation-name: slide-bottom;\r\n}\r\n\r\n.sort-warp {\r\n    width: 70%;\r\n    max-width: 780px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.shadow-box {\r\n    box-shadow: 0 1px 20px -6px rgba(0, 0, 0, 0.5);\r\n    transition: all 0.3s ease;\r\n}\r\n\r\n.shadow-box:hover {\r\n    box-shadow: 0 5px 10px 5px rgba(110, 110, 110, 0.4);\r\n}\r\n\r\n.article-wrap {\r\n    width: 70%;\r\n    margin: 40px auto;\r\n    min-height: 600px;\r\n}\r\n\r\n.isActive {\r\n    animation: scale 1.5s ease-in-out infinite;\r\n}\r\n\r\n.pagination-wrap {\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 40px;\r\n}\r\n\r\n@media screen and (max-width: 900px) {\r\n    .sort-warp {\r\n        width: 90%;\r\n    }\r\n\r\n    .article-wrap {\r\n        width: 90%;\r\n    }\r\n}\r\n</style>\r\n"],"mappings":"AAiCA,MAAAA,OAAA,GAAAA,CAAA;AACA,MAAAC,MAAA,GAAAA,CAAA;AACA,MAAAC,WAAA,GAAAA,CAAA;AACA,MAAAC,QAAA,GAAAA,CAAA;AAEA;EACAC,UAAA;IACAJ,OAAA;IACAC,MAAA;IACAC,WAAA;IACAC;EACA;EAEAE,KAAA;IACA;MACAC,MAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAF,MAAA;MACAG,QAAA;IACA;EACA;EAEAC,QAAA;IACAC,WAAA;MACA,MAAAC,OAAA,QAAAH,QAAA,CAAAI,OAAA,CAAAC,OAAA,IAAAA,OAAA,CAAAC,IAAA;MACA,eAAAC,GAAA,CAAAJ,OAAA;IACA;EACA;EAEAK,KAAA;IACAV,OAAA;MACA,KAAAE,QAAA,CAAAS,MAAA,SAAAT,QAAA,CAAAU,MAAA;MACA,KAAAb,MAAA,QAAAC,MAAA,CAAAC,KAAA,CAAAF,MAAA;MACA,KAAAc,WAAA;IACA;EACA;EAEAC,QAAA;IACA,KAAAD,WAAA;EACA;EAEAE,QAAA;EAEAC,OAAA;IACAH,YAAA;MACA,KAAAI,QAAA,CAAAC,GAAA,kCAAAnB,MAAA,EAAAoB,IAAA,CAAAC,GAAA;QACA,KAAAlB,QAAA,GAAAkB,GAAA,CAAAtB,IAAA,CAAAuB,GAAA,CAAAd,OAAA;UACA;UACAA,OAAA,CAAAC,IAAA,QAAAc,WAAA,CAAAf,OAAA,CAAAC,IAAA;UACA,OAAAD,OAAA;QACA;MACA;IACA;IACA;IACAe,YAAAC,UAAA;MACA;MACA,eAAAd,GAAA,CAAAc,UAAA,CAAAC,OAAA,iBAAAb,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}