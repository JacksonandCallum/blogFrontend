{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Link to the project's GitHub page:\n * https://github.com/pickhardt/coffeescript-codemirror-mode\n */\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd)\n    // AMD\n    define([\"../../lib/codemirror\"], mod);else\n    // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"coffeescript\", function (conf, parserConf) {\n    var ERRORCLASS = \"error\";\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n    }\n    var operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\n    var delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\n    var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\n    var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;\n    var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\", \"isnt\", \"in\", \"instanceof\", \"typeof\"]);\n    var indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\", \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\n    var commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\", \"do\", \"in\", \"of\", \"new\", \"return\", \"then\", \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\n    var keywords = wordRegexp(indentKeywords.concat(commonKeywords));\n    indentKeywords = wordRegexp(indentKeywords);\n    var stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\n    var regexPrefixes = /^(\\/{3}|\\/)/;\n    var commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\n    var constants = wordRegexp(commonConstants);\n\n    // Tokenizers\n    function tokenBase(stream, state) {\n      // Handle scope changes\n      if (stream.sol()) {\n        if (state.scope.align === null) state.scope.align = false;\n        var scopeOffset = state.scope.offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\n            return \"indent\";\n          } else if (lineOffset < scopeOffset) {\n            return \"dedent\";\n          }\n          return null;\n        } else {\n          if (scopeOffset > 0) {\n            dedent(stream, state);\n          }\n        }\n      }\n      if (stream.eatSpace()) {\n        return null;\n      }\n      var ch = stream.peek();\n\n      // Handle docco title comment (single line)\n      if (stream.match(\"####\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      // Handle multi line comments\n      if (stream.match(\"###\")) {\n        state.tokenize = longComment;\n        return state.tokenize(stream, state);\n      }\n\n      // Single line comment\n      if (ch === \"#\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      // Handle number literals\n      if (stream.match(/^-?[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n          floatLiteral = true;\n        }\n        if (stream.match(/^-?\\d+\\.\\d*/)) {\n          floatLiteral = true;\n        }\n        if (stream.match(/^-?\\.\\d+/)) {\n          floatLiteral = true;\n        }\n        if (floatLiteral) {\n          // prevent from getting extra . on 1..\n          if (stream.peek() == \".\") {\n            stream.backUp(1);\n          }\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^-?0x[0-9a-f]+/i)) {\n          intLiteral = true;\n        }\n        // Decimal\n        if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^-?0(?![\\dx])/i)) {\n          intLiteral = true;\n        }\n        if (intLiteral) {\n          return \"number\";\n        }\n      }\n\n      // Handle strings\n      if (stream.match(stringPrefixes)) {\n        state.tokenize = tokenFactory(stream.current(), false, \"string\");\n        return state.tokenize(stream, state);\n      }\n      // Handle regex literals\n      if (stream.match(regexPrefixes)) {\n        if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) {\n          // prevent highlight of division\n          state.tokenize = tokenFactory(stream.current(), true, \"string-2\");\n          return state.tokenize(stream, state);\n        } else {\n          stream.backUp(1);\n        }\n      }\n\n      // Handle operators and delimiters\n      if (stream.match(operators) || stream.match(wordOperators)) {\n        return \"operator\";\n      }\n      if (stream.match(delimiters)) {\n        return \"punctuation\";\n      }\n      if (stream.match(constants)) {\n        return \"atom\";\n      }\n      if (stream.match(atProp) || state.prop && stream.match(identifiers)) {\n        return \"property\";\n      }\n      if (stream.match(keywords)) {\n        return \"keyword\";\n      }\n      if (stream.match(identifiers)) {\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return ERRORCLASS;\n    }\n    function tokenFactory(delimiter, singleline, outclass) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\/\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol()) {\n              return outclass;\n            }\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenBase;\n            return outclass;\n          } else {\n            stream.eat(/['\"\\/]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors) {\n            outclass = ERRORCLASS;\n          } else {\n            state.tokenize = tokenBase;\n          }\n        }\n        return outclass;\n      };\n    }\n    function longComment(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^#]/);\n        if (stream.match(\"###\")) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        stream.eatWhile(\"#\");\n      }\n      return \"comment\";\n    }\n    function indent(stream, state, type) {\n      type = type || \"coffee\";\n      var offset = 0,\n        align = false,\n        alignOffset = null;\n      for (var scope = state.scope; scope; scope = scope.prev) {\n        if (scope.type === \"coffee\" || scope.type == \"}\") {\n          offset = scope.offset + conf.indentUnit;\n          break;\n        }\n      }\n      if (type !== \"coffee\") {\n        align = null;\n        alignOffset = stream.column() + stream.current().length;\n      } else if (state.scope.align) {\n        state.scope.align = false;\n      }\n      state.scope = {\n        offset: offset,\n        type: type,\n        prev: state.scope,\n        align: align,\n        alignOffset: alignOffset\n      };\n    }\n    function dedent(stream, state) {\n      if (!state.scope.prev) return;\n      if (state.scope.type === \"coffee\") {\n        var _indent = stream.indentation();\n        var matched = false;\n        for (var scope = state.scope; scope; scope = scope.prev) {\n          if (_indent === scope.offset) {\n            matched = true;\n            break;\n          }\n        }\n        if (!matched) {\n          return true;\n        }\n        while (state.scope.prev && state.scope.offset !== _indent) {\n          state.scope = state.scope.prev;\n        }\n        return false;\n      } else {\n        state.scope = state.scope.prev;\n        return false;\n      }\n    }\n    function tokenLexer(stream, state) {\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle scope changes.\n      if (current === \"return\") {\n        state.dedent = true;\n      }\n      if ((current === \"->\" || current === \"=>\") && stream.eol() || style === \"indent\") {\n        indent(stream, state);\n      }\n      var delimiter_index = \"[({\".indexOf(current);\n      if (delimiter_index !== -1) {\n        indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index + 1));\n      }\n      if (indentKeywords.exec(current)) {\n        indent(stream, state);\n      }\n      if (current == \"then\") {\n        dedent(stream, state);\n      }\n      if (style === \"dedent\") {\n        if (dedent(stream, state)) {\n          return ERRORCLASS;\n        }\n      }\n      delimiter_index = \"])}\".indexOf(current);\n      if (delimiter_index !== -1) {\n        while (state.scope.type == \"coffee\" && state.scope.prev) state.scope = state.scope.prev;\n        if (state.scope.type == current) state.scope = state.scope.prev;\n      }\n      if (state.dedent && stream.eol()) {\n        if (state.scope.type == \"coffee\" && state.scope.prev) state.scope = state.scope.prev;\n        state.dedent = false;\n      }\n      return style;\n    }\n    var external = {\n      startState: function (basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scope: {\n            offset: basecolumn || 0,\n            type: \"coffee\",\n            prev: null,\n            align: false\n          },\n          prop: false,\n          dedent: 0\n        };\n      },\n      token: function (stream, state) {\n        var fillAlign = state.scope.align === null && state.scope;\n        if (fillAlign && stream.sol()) fillAlign.align = false;\n        var style = tokenLexer(stream, state);\n        if (style && style != \"comment\") {\n          if (fillAlign) fillAlign.align = true;\n          state.prop = style == \"punctuation\" && stream.current() == \".\";\n        }\n        return style;\n      },\n      indent: function (state, text) {\n        if (state.tokenize != tokenBase) return 0;\n        var scope = state.scope;\n        var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\n        if (closer) while (scope.type == \"coffee\" && scope.prev) scope = scope.prev;\n        var closes = closer && scope.type === text.charAt(0);\n        if (scope.align) return scope.alignOffset - (closes ? 1 : 0);else return (closes ? scope.prev : scope).offset;\n      },\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n\n  // IANA registered media type\n  // https://www.iana.org/assignments/media-types/\n  CodeMirror.defineMIME(\"application/vnd.coffeescript\", \"coffeescript\");\n  CodeMirror.defineMIME(\"text/x-coffeescript\", \"coffeescript\");\n  CodeMirror.defineMIME(\"text/coffeescript\", \"coffeescript\");\n});","map":{"version":3,"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","conf","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","operators","delimiters","identifiers","atProp","wordOperators","indentKeywords","commonKeywords","keywords","concat","stringPrefixes","regexPrefixes","commonConstants","constants","tokenBase","stream","state","sol","scope","align","scopeOffset","offset","eatSpace","lineOffset","indentation","type","dedent","ch","peek","match","skipToEnd","tokenize","longComment","floatLiteral","backUp","intLiteral","tokenFactory","current","prop","next","delimiter","singleline","outclass","eol","eatWhile","eat","singleLineStringErrors","indent","alignOffset","prev","indentUnit","column","length","_indent","matched","tokenLexer","style","delimiter_index","indexOf","slice","exec","external","startState","basecolumn","token","fillAlign","text","closer","charAt","closes","lineComment","fold","defineMIME"],"sources":["D:/Java_Projects/MYBLOG/frontend/blog-frontend/node_modules/codemirror/mode/coffeescript/coffeescript.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Link to the project's GitHub page:\n * https://github.com/pickhardt/coffeescript-codemirror-mode\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"coffeescript\", function(conf, parserConf) {\n  var ERRORCLASS = \"error\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\n  var delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\n  var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\n  var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\",\n                                  \"is\", \"isnt\", \"in\",\n                                  \"instanceof\", \"typeof\"]);\n  var indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\",\n                        \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\n  var commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\",\n                        \"do\", \"in\", \"of\", \"new\", \"return\", \"then\",\n                        \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\n\n  var keywords = wordRegexp(indentKeywords.concat(commonKeywords));\n\n  indentKeywords = wordRegexp(indentKeywords);\n\n\n  var stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\n  var regexPrefixes = /^(\\/{3}|\\/)/;\n  var commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\n  var constants = wordRegexp(commonConstants);\n\n  // Tokenizers\n  function tokenBase(stream, state) {\n    // Handle scope changes\n    if (stream.sol()) {\n      if (state.scope.align === null) state.scope.align = false;\n      var scopeOffset = state.scope.offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\n          return \"indent\";\n        } else if (lineOffset < scopeOffset) {\n          return \"dedent\";\n        }\n        return null;\n      } else {\n        if (scopeOffset > 0) {\n          dedent(stream, state);\n        }\n      }\n    }\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var ch = stream.peek();\n\n    // Handle docco title comment (single line)\n    if (stream.match(\"####\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle multi line comments\n    if (stream.match(\"###\")) {\n      state.tokenize = longComment;\n      return state.tokenize(stream, state);\n    }\n\n    // Single line comment\n    if (ch === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle number literals\n    if (stream.match(/^-?[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^-?\\d+\\.\\d*/)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^-?\\.\\d+/)) {\n        floatLiteral = true;\n      }\n\n      if (floatLiteral) {\n        // prevent from getting extra . on 1..\n        if (stream.peek() == \".\"){\n          stream.backUp(1);\n        }\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^-?0x[0-9a-f]+/i)) {\n        intLiteral = true;\n      }\n      // Decimal\n      if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^-?0(?![\\dx])/i)) {\n        intLiteral = true;\n      }\n      if (intLiteral) {\n        return \"number\";\n      }\n    }\n\n    // Handle strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenFactory(stream.current(), false, \"string\");\n      return state.tokenize(stream, state);\n    }\n    // Handle regex literals\n    if (stream.match(regexPrefixes)) {\n      if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) { // prevent highlight of division\n        state.tokenize = tokenFactory(stream.current(), true, \"string-2\");\n        return state.tokenize(stream, state);\n      } else {\n        stream.backUp(1);\n      }\n    }\n\n\n\n    // Handle operators and delimiters\n    if (stream.match(operators) || stream.match(wordOperators)) {\n      return \"operator\";\n    }\n    if (stream.match(delimiters)) {\n      return \"punctuation\";\n    }\n\n    if (stream.match(constants)) {\n      return \"atom\";\n    }\n\n    if (stream.match(atProp) || state.prop && stream.match(identifiers)) {\n      return \"property\";\n    }\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(identifiers)) {\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return ERRORCLASS;\n  }\n\n  function tokenFactory(delimiter, singleline, outclass) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\/\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) {\n            return outclass;\n          }\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          return outclass;\n        } else {\n          stream.eat(/['\"\\/]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) {\n          outclass = ERRORCLASS;\n        } else {\n          state.tokenize = tokenBase;\n        }\n      }\n      return outclass;\n    };\n  }\n\n  function longComment(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^#]/);\n      if (stream.match(\"###\")) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      stream.eatWhile(\"#\");\n    }\n    return \"comment\";\n  }\n\n  function indent(stream, state, type) {\n    type = type || \"coffee\";\n    var offset = 0, align = false, alignOffset = null;\n    for (var scope = state.scope; scope; scope = scope.prev) {\n      if (scope.type === \"coffee\" || scope.type == \"}\") {\n        offset = scope.offset + conf.indentUnit;\n        break;\n      }\n    }\n    if (type !== \"coffee\") {\n      align = null;\n      alignOffset = stream.column() + stream.current().length;\n    } else if (state.scope.align) {\n      state.scope.align = false;\n    }\n    state.scope = {\n      offset: offset,\n      type: type,\n      prev: state.scope,\n      align: align,\n      alignOffset: alignOffset\n    };\n  }\n\n  function dedent(stream, state) {\n    if (!state.scope.prev) return;\n    if (state.scope.type === \"coffee\") {\n      var _indent = stream.indentation();\n      var matched = false;\n      for (var scope = state.scope; scope; scope = scope.prev) {\n        if (_indent === scope.offset) {\n          matched = true;\n          break;\n        }\n      }\n      if (!matched) {\n        return true;\n      }\n      while (state.scope.prev && state.scope.offset !== _indent) {\n        state.scope = state.scope.prev;\n      }\n      return false;\n    } else {\n      state.scope = state.scope.prev;\n      return false;\n    }\n  }\n\n  function tokenLexer(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle scope changes.\n    if (current === \"return\") {\n      state.dedent = true;\n    }\n    if (((current === \"->\" || current === \"=>\") && stream.eol())\n        || style === \"indent\") {\n      indent(stream, state);\n    }\n    var delimiter_index = \"[({\".indexOf(current);\n    if (delimiter_index !== -1) {\n      indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n    }\n    if (indentKeywords.exec(current)){\n      indent(stream, state);\n    }\n    if (current == \"then\"){\n      dedent(stream, state);\n    }\n\n\n    if (style === \"dedent\") {\n      if (dedent(stream, state)) {\n        return ERRORCLASS;\n      }\n    }\n    delimiter_index = \"])}\".indexOf(current);\n    if (delimiter_index !== -1) {\n      while (state.scope.type == \"coffee\" && state.scope.prev)\n        state.scope = state.scope.prev;\n      if (state.scope.type == current)\n        state.scope = state.scope.prev;\n    }\n    if (state.dedent && stream.eol()) {\n      if (state.scope.type == \"coffee\" && state.scope.prev)\n        state.scope = state.scope.prev;\n      state.dedent = false;\n    }\n\n    return style;\n  }\n\n  var external = {\n    startState: function(basecolumn) {\n      return {\n        tokenize: tokenBase,\n        scope: {offset:basecolumn || 0, type:\"coffee\", prev: null, align: false},\n        prop: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var fillAlign = state.scope.align === null && state.scope;\n      if (fillAlign && stream.sol()) fillAlign.align = false;\n\n      var style = tokenLexer(stream, state);\n      if (style && style != \"comment\") {\n        if (fillAlign) fillAlign.align = true;\n        state.prop = style == \"punctuation\" && stream.current() == \".\"\n      }\n\n      return style;\n    },\n\n    indent: function(state, text) {\n      if (state.tokenize != tokenBase) return 0;\n      var scope = state.scope;\n      var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\n      if (closer) while (scope.type == \"coffee\" && scope.prev) scope = scope.prev;\n      var closes = closer && scope.type === text.charAt(0);\n      if (scope.align)\n        return scope.alignOffset - (closes ? 1 : 0);\n      else\n        return (closes ? scope.prev : scope).offset;\n    },\n\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n  return external;\n});\n\n// IANA registered media type\n// https://www.iana.org/assignments/media-types/\nCodeMirror.defineMIME(\"application/vnd.coffeescript\", \"coffeescript\");\n\nCodeMirror.defineMIME(\"text/x-coffeescript\", \"coffeescript\");\nCodeMirror.defineMIME(\"text/coffeescript\", \"coffeescript\");\n\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}