{"ast":null,"code":"export default {\n  props: {\n    //内容\n    printerInfo: {\n      type: String,\n      default: \"\"\n    },\n    //速度\n    duration: {\n      type: Number,\n      default: 100\n    },\n    //延迟\n    delay: {\n      type: Number,\n      default: 3000\n    },\n    working: {\n      type: Boolean,\n      default: true\n    },\n    once: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      content: \"\",\n      cursor: 0,\n      timer: null,\n      timeout: null,\n      print: true\n    };\n  },\n  created() {\n    if (this.working) {\n      //this.work：引用函数\n      //this.work()：执行函数\n      this.start(this.work);\n    } else {\n      this.content = this.printerInfo;\n    }\n  },\n  watch: {\n    working(newVal) {\n      this.toBegin();\n    },\n    printerInfo(newVal) {\n      this.toBegin();\n    },\n    cursor(cursor) {\n      //slice(start,end)：不包含end\n      this.content = this.printerInfo.slice(0, cursor);\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  methods: {\n    /**\r\n     * 定时\r\n     */\n    start(work) {\n      //延迟\n      this.timeout = setTimeout(() => {\n        //速度\n        this.timer = setInterval(() => {\n          work();\n          if (this.cursor === 0 || this.cursor === this.printerInfo.length && !this.once) {\n            //此处为了延迟\n            clearInterval(this.timer);\n            this.start(this.work);\n          } else if (this.cursor === this.printerInfo.length && this.once) {\n            clearInterval(this.timer);\n          }\n        }, this.duration);\n      }, this.delay);\n    },\n    /**\r\n     * 逻辑\r\n     */\n    work() {\n      let cursor = this.cursor;\n      cursor += this.print ? 1 : -1;\n      if (this.print) {\n        if (cursor === this.printerInfo.length + 1) {\n          cursor -= 2;\n          this.print = !this.print;\n        }\n      } else {\n        if (cursor === -1) {\n          cursor += 2;\n          this.print = !this.print;\n        }\n      }\n      this.cursor = cursor;\n    },\n    toBegin() {\n      this.cursor = 0;\n      if (this.timeout !== null) {\n        clearTimeout(this.timeout);\n        if (this.timer !== null) {\n          clearInterval(this.timer);\n        }\n      }\n      if (this.working) {\n        this.start(this.work);\n      } else {\n        this.content = this.printerInfo;\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","printerInfo","type","String","default","duration","Number","delay","working","Boolean","once","data","content","cursor","timer","timeout","print","created","start","work","watch","newVal","toBegin","slice","beforeDestroy","clearInterval","methods","setTimeout","setInterval","length","clearTimeout"],"sources":["src/views/front/printer.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <slot name=\"paper\" :content=\"content\"></slot>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n    props: {\r\n        //内容\r\n        printerInfo: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n        //速度\r\n        duration: {\r\n            type: Number,\r\n            default: 100\r\n        },\r\n        //延迟\r\n        delay: {\r\n            type: Number,\r\n            default: 3000\r\n        },\r\n        working: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        once: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            content: \"\",\r\n            cursor: 0,\r\n            timer: null,\r\n            timeout: null,\r\n            print: true\r\n        };\r\n    },\r\n    created() {\r\n        if (this.working) {\r\n            //this.work：引用函数\r\n            //this.work()：执行函数\r\n            this.start(this.work);\r\n        } else {\r\n            this.content = this.printerInfo\r\n        }\r\n    },\r\n    watch: {\r\n        working(newVal) {\r\n            this.toBegin();\r\n        },\r\n        printerInfo(newVal) {\r\n            this.toBegin();\r\n        },\r\n        cursor(cursor) {\r\n            //slice(start,end)：不包含end\r\n            this.content = this.printerInfo.slice(0, cursor)\r\n        }\r\n    },\r\n    beforeDestroy() {\r\n        clearInterval(this.timer);\r\n    },\r\n    methods: {\r\n        /**\r\n         * 定时\r\n         */\r\n        start(work) {\r\n            //延迟\r\n            this.timeout = setTimeout(() => {\r\n                //速度\r\n                this.timer = setInterval(() => {\r\n                    work();\r\n                    if (this.cursor === 0 || (this.cursor === this.printerInfo.length && !this.once)) {\r\n                        //此处为了延迟\r\n                        clearInterval(this.timer);\r\n                        this.start(this.work);\r\n                    } else if (this.cursor === this.printerInfo.length && this.once) {\r\n                        clearInterval(this.timer);\r\n                    }\r\n                }, this.duration);\r\n            }, this.delay)\r\n        },\r\n        /**\r\n         * 逻辑\r\n         */\r\n        work() {\r\n            let cursor = this.cursor;\r\n            cursor += this.print ? 1 : -1;\r\n            if (this.print) {\r\n                if (cursor === this.printerInfo.length + 1) {\r\n                    cursor -= 2;\r\n                    this.print = !this.print;\r\n                }\r\n            } else {\r\n                if (cursor === -1) {\r\n                    cursor += 2;\r\n                    this.print = !this.print;\r\n                }\r\n            }\r\n            this.cursor = cursor;\r\n        },\r\n        toBegin() {\r\n            this.cursor = 0;\r\n            if (this.timeout !== null) {\r\n                clearTimeout(this.timeout);\r\n                if (this.timer !== null) {\r\n                    clearInterval(this.timer);\r\n                }\r\n            }\r\n            if (this.working) {\r\n                this.start(this.work);\r\n            } else {\r\n                this.content = this.printerInfo;\r\n            }\r\n        }\r\n    }\r\n};\r\n</script>"],"mappings":"AAMA;EACAA,KAAA;IACA;IACAC,WAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACA;IACAC,QAAA;MACAH,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;IACA;IACAG,KAAA;MACAL,IAAA,EAAAI,MAAA;MACAF,OAAA;IACA;IACAI,OAAA;MACAN,IAAA,EAAAO,OAAA;MACAL,OAAA;IACA;IACAM,IAAA;MACAR,IAAA,EAAAO,OAAA;MACAL,OAAA;IACA;EACA;EACAO,KAAA;IACA;MACAC,OAAA;MACAC,MAAA;MACAC,KAAA;MACAC,OAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACA,SAAAT,OAAA;MACA;MACA;MACA,KAAAU,KAAA,MAAAC,IAAA;IACA;MACA,KAAAP,OAAA,QAAAX,WAAA;IACA;EACA;EACAmB,KAAA;IACAZ,QAAAa,MAAA;MACA,KAAAC,OAAA;IACA;IACArB,YAAAoB,MAAA;MACA,KAAAC,OAAA;IACA;IACAT,aAAA;MACA;MACA,KAAAD,OAAA,QAAAX,WAAA,CAAAsB,KAAA,IAAAV,MAAA;IACA;EACA;EACAW,cAAA;IACAC,aAAA,MAAAX,KAAA;EACA;EACAY,OAAA;IACA;AACA;AACA;IACAR,MAAAC,IAAA;MACA;MACA,KAAAJ,OAAA,GAAAY,UAAA;QACA;QACA,KAAAb,KAAA,GAAAc,WAAA;UACAT,IAAA;UACA,SAAAN,MAAA,eAAAA,MAAA,UAAAZ,WAAA,CAAA4B,MAAA,UAAAnB,IAAA;YACA;YACAe,aAAA,MAAAX,KAAA;YACA,KAAAI,KAAA,MAAAC,IAAA;UACA,gBAAAN,MAAA,UAAAZ,WAAA,CAAA4B,MAAA,SAAAnB,IAAA;YACAe,aAAA,MAAAX,KAAA;UACA;QACA,QAAAT,QAAA;MACA,QAAAE,KAAA;IACA;IACA;AACA;AACA;IACAY,KAAA;MACA,IAAAN,MAAA,QAAAA,MAAA;MACAA,MAAA,SAAAG,KAAA;MACA,SAAAA,KAAA;QACA,IAAAH,MAAA,UAAAZ,WAAA,CAAA4B,MAAA;UACAhB,MAAA;UACA,KAAAG,KAAA,SAAAA,KAAA;QACA;MACA;QACA,IAAAH,MAAA;UACAA,MAAA;UACA,KAAAG,KAAA,SAAAA,KAAA;QACA;MACA;MACA,KAAAH,MAAA,GAAAA,MAAA;IACA;IACAS,QAAA;MACA,KAAAT,MAAA;MACA,SAAAE,OAAA;QACAe,YAAA,MAAAf,OAAA;QACA,SAAAD,KAAA;UACAW,aAAA,MAAAX,KAAA;QACA;MACA;MACA,SAAAN,OAAA;QACA,KAAAU,KAAA,MAAAC,IAAA;MACA;QACA,KAAAP,OAAA,QAAAX,WAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}